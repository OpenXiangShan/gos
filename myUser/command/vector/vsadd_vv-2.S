#
# This file is automatically generated. Do not edit.
# Instruction: vsadd.vv

#include "riscv_test.h"
#include "test_macros.h"

RVTEST_RV64UV

.align  6;
.globl vsadd_vv_2_start;
vsadd_vv_2_start:
# Zero all vector registers
vsetvli t0, x0, e8,m8,tu,mu
vmv.v.i v0, 0x0
vmv.v.i v8, 0x0
vmv.v.i v16, 0x0
vmv.v.i v24, 0x0


# Generating tests for VL: 4, LMUL: m4, SEW: e64, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 0
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 16
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m4,tu,mu
vle8.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 80
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e64,m4,tu,mu
vle64.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 144
add a0, a0, a5

# Load data into v28 register group.
li t0, -1
vsetvli t1, t0, e64,m4,tu,mu
vle64.v v28, (a0)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e64,m4,tu,mu
vsadd.vv v16, v28, v8, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v16 register group into result data area.
li t0, -1
vsetvli t1, t0, e64,m4,tu,mu
vse64.v v16, (a0)

  TEST_CASE(2, t0, 0x4caa98378257619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(3, t0, 0x456091ce64a9701b, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(4, t0, 0x12, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(5, t0, 0xb9ebbdaca012c06, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(6, t0, 0x9efd115df05f7f2b, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(7, t0, 0x15500b3b39600a9a, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(8, t0, 0x90b9566a421b89f5, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(9, t0, 0xd6eacf89a69193a, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(10, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 1, LMUL: m4, SEW: e64, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 208
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 224
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m4,tu,mu
vle8.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 288
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e64,m4,tu,mu
vle64.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 352
add a0, a0, a5

# Load data into v28 register group.
li t0, -1
vsetvli t1, t0, e64,m4,tu,mu
vle64.v v28, (a0)

# -------------- TEST BEGIN --------------
li t0, 1
vsetvli t1, t0, e64,m4,tu,mu
vsadd.vv v16, v28, v8, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v16 register group into result data area.
li t0, -1
vsetvli t1, t0, e64,m4,tu,mu
vse64.v v16, (a0)


  TEST_CASE(11, t0, 0x4caa98378257619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(12, t0, 0x456091ce64a9701b, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(13, t0, 0xc59f38c9991964f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(14, t0, 0xb9ebbdaca012c06, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(15, t0, 0x9efd115df05f7f2b, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(16, t0, 0x15500b3b39600a9a, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(17, t0, 0x90b9566a421b89f5, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(18, t0, 0xd6eacf89a69193a, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(19, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 0, LMUL: m8, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 416
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 432
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 560
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 688
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,m8,tu,mu
vsadd.vv v24, v16, v8
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v24, (a0)


  TEST_CASE(20, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(21, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(22, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(23, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(24, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(25, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(26, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(27, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(28, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(29, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(30, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(31, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(32, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(33, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(34, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(35, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(36, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 63, LMUL: m8, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 816
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 832
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 960
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1088
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 63
vsetvli t1, t0, e8,m8,tu,mu
vsadd.vv v24, v16, v8
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v24, (a0)


  TEST_CASE(37, t0, 0x7f7f7f00f8120300, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(38, t0, 0x7f00f8120300feff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(39, t0, 0xf8120300feff7f7f, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(40, t0, 0x300feff7f7f7f00, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(41, t0, 0xfeff7f7f7f00f812, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(42, t0, 0x7f7f7f00f8120300, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(43, t0, 0x7f00f8120300feff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(44, t0, 0xf5120300feff7f7f, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(45, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(46, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(47, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(48, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(49, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(50, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(51, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(52, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(53, t0, 0x1, csrr t0, vxsat)


# Generating tests for VL: 64, LMUL: m8, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 1216
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1232
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1360
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1488
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 64
vsetvli t1, t0, e8,m8,tu,mu
vsadd.vv v24, v16, v8
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v24, (a0)


  TEST_CASE(54, t0, 0x7f7f7f00f8120300, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(55, t0, 0x7f00f8120300feff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(56, t0, 0xf8120300feff7f7f, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(57, t0, 0x300feff7f7f7f00, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(58, t0, 0xfeff7f7f7f00f812, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(59, t0, 0x7f7f7f00f8120300, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(60, t0, 0x7f00f8120300feff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(61, t0, 0xf8120300feff7f7f, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(62, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(63, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(64, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(65, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(66, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(67, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(68, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(69, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(70, t0, 0x1, csrr t0, vxsat)


# Generating tests for VL: 128, LMUL: m8, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 1616
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1632
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1760
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1888
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 128
vsetvli t1, t0, e8,m8,tu,mu
vsadd.vv v24, v16, v8
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v24, (a0)


  TEST_CASE(71, t0, 0x7f7f7f00f8120300, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(72, t0, 0x7f00f8120300feff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(73, t0, 0xf8120300feff7f7f, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(74, t0, 0x300feff7f7f7f00, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(75, t0, 0xfeff7f7f7f00f812, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(76, t0, 0x7f7f7f00f8120300, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(77, t0, 0x7f00f8120300feff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(78, t0, 0xf8120300feff7f7f, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(79, t0, 0x300feff7f7f7f00, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(80, t0, 0xfeff7f7f7f00f812, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(81, t0, 0x7f7f7f00f8120300, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(82, t0, 0x7f00f8120300feff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(83, t0, 0xf8120300feff7f7f, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(84, t0, 0x300feff7f7f7f00, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(85, t0, 0xfeff7f7f7f00f812, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(86, t0, 0x7f7f7f00f8120300, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(87, t0, 0x1, csrr t0, vxsat)


# Generating tests for VL: 127, LMUL: m8, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 2016
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2032
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2160
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2288
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 127
vsetvli t1, t0, e8,m8,tu,mu
vsadd.vv v24, v16, v8
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v24, (a0)


  TEST_CASE(88, t0, 0x7f7f7f00f8120300, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(89, t0, 0x7f00f8120300feff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(90, t0, 0xf8120300feff7f7f, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(91, t0, 0x300feff7f7f7f00, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(92, t0, 0xfeff7f7f7f00f812, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(93, t0, 0x7f7f7f00f8120300, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(94, t0, 0x7f00f8120300feff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(95, t0, 0xf8120300feff7f7f, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(96, t0, 0x300feff7f7f7f00, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(97, t0, 0xfeff7f7f7f00f812, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(98, t0, 0x7f7f7f00f8120300, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(99, t0, 0x7f00f8120300feff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(100, t0, 0xf8120300feff7f7f, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(101, t0, 0x300feff7f7f7f00, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(102, t0, 0xfeff7f7f7f00f812, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(103, t0, 0x2c7f7f00f8120300, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(104, t0, 0x1, csrr t0, vxsat)


# Generating tests for VL: 129, LMUL: m8, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 2416
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2432
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2560
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2688
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 129
vsetvli t1, t0, e8,m8,tu,mu
vsadd.vv v24, v16, v8
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v24, (a0)


  TEST_CASE(105, t0, 0x7f7f7f00f8120300, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(106, t0, 0x7f00f8120300feff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(107, t0, 0xf8120300feff7f7f, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(108, t0, 0x300feff7f7f7f00, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(109, t0, 0xfeff7f7f7f00f812, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(110, t0, 0x7f7f7f00f8120300, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(111, t0, 0x7f00f8120300feff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(112, t0, 0xf8120300feff7f7f, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(113, t0, 0x300feff7f7f7f00, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(114, t0, 0xfeff7f7f7f00f812, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(115, t0, 0x7f7f7f00f8120300, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(116, t0, 0x7f00f8120300feff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(117, t0, 0xf8120300feff7f7f, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(118, t0, 0x300feff7f7f7f00, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(119, t0, 0xfeff7f7f7f00f812, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(120, t0, 0x7f7f7f00f8120300, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(121, t0, 0x1, csrr t0, vxsat)


# Generating tests for VL: 75, LMUL: m8, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 2816
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2832
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2960
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3088
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 75
vsetvli t1, t0, e8,m8,tu,mu
vsadd.vv v24, v16, v8
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v24, (a0)


  TEST_CASE(122, t0, 0x7f7f7f00f8120300, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(123, t0, 0x7f00f8120300feff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(124, t0, 0xf8120300feff7f7f, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(125, t0, 0x300feff7f7f7f00, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(126, t0, 0xfeff7f7f7f00f812, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(127, t0, 0x7f7f7f00f8120300, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(128, t0, 0x7f00f8120300feff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(129, t0, 0xf8120300feff7f7f, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(130, t0, 0x300feff7f7f7f00, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(131, t0, 0xdc6de5fa4d00f812, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(132, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(133, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(134, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(135, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(136, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(137, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(138, t0, 0x1, csrr t0, vxsat)


# Generating tests for VL: 93, LMUL: m8, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 3216
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3232
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3360
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3488
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 93
vsetvli t1, t0, e8,m8,tu,mu
vsadd.vv v24, v16, v8
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v24, (a0)


  TEST_CASE(139, t0, 0x7f7f7f00f8120300, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(140, t0, 0x7f00f8120300feff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(141, t0, 0xf8120300feff7f7f, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(142, t0, 0x300feff7f7f7f00, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(143, t0, 0xfeff7f7f7f00f812, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(144, t0, 0x7f7f7f00f8120300, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(145, t0, 0x7f00f8120300feff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(146, t0, 0xf8120300feff7f7f, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(147, t0, 0x300feff7f7f7f00, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(148, t0, 0xfeff7f7f7f00f812, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(149, t0, 0x7f7f7f00f8120300, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(150, t0, 0xb7fb9e120300feff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(151, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(152, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(153, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(154, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(155, t0, 0x1, csrr t0, vxsat)


# Generating tests for VL: 56, LMUL: m8, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 3616
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3632
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3760
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3888
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 56
vsetvli t1, t0, e8,m8,tu,mu
vsadd.vv v24, v16, v8
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v24, (a0)


  TEST_CASE(156, t0, 0x7f7f7f00f8120300, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(157, t0, 0x7f00f8120300feff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(158, t0, 0xf8120300feff7f7f, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(159, t0, 0x300feff7f7f7f00, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(160, t0, 0xfeff7f7f7f00f812, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(161, t0, 0x7f7f7f00f8120300, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(162, t0, 0x7f00f8120300feff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(163, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(164, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(165, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(166, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(167, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(168, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(169, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(170, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(171, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(172, t0, 0x1, csrr t0, vxsat)


# Generating tests for VL: 0, LMUL: m8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 4016
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 4032
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 4160
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 4288
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,m8,tu,mu
vsadd.vv v24, v16, v8, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v24, (a0)


  TEST_CASE(173, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(174, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(175, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(176, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(177, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(178, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(179, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(180, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(181, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(182, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(183, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(184, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(185, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(186, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(187, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(188, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(189, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 63, LMUL: m8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 4416
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 4432
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 4560
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 4688
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 63
vsetvli t1, t0, e8,m8,tu,mu
vsadd.vv v24, v16, v8, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v24, (a0)


  TEST_CASE(190, t0, 0x7fd67fcbdd12bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(191, t0, 0x7fdccbfa03fffe31, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(192, t0, 0xf840fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(193, t0, 0x8133feff228f7fc6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(194, t0, 0xfeff517f7f00a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(195, t0, 0xe37f7f0047123b00, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(196, t0, 0x7fcef8af03003124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(197, t0, 0xf5040300efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(198, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(199, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(200, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(201, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(202, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(203, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(204, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(205, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(206, t0, 0x1, csrr t0, vxsat)


# Generating tests for VL: 64, LMUL: m8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 4816
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 4832
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 4960
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 5088
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 64
vsetvli t1, t0, e8,m8,tu,mu
vsadd.vv v24, v16, v8, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v24, (a0)


  TEST_CASE(207, t0, 0x7fd67fcbdd12bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(208, t0, 0x7fdccbfa03fffe31, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(209, t0, 0xf840fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(210, t0, 0x8133feff228f7fc6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(211, t0, 0xfeff517f7f00a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(212, t0, 0xe37f7f0047123b00, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(213, t0, 0x7fcef8af03003124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(214, t0, 0xf5040300efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(215, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(216, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(217, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(218, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(219, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(220, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(221, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(222, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(223, t0, 0x1, csrr t0, vxsat)


# Generating tests for VL: 128, LMUL: m8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 5216
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 5232
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 5360
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 5488
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 128
vsetvli t1, t0, e8,m8,tu,mu
vsadd.vv v24, v16, v8, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v24, (a0)


  TEST_CASE(224, t0, 0x7fd67fcbdd12bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(225, t0, 0x7fdccbfa03fffe31, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(226, t0, 0xf840fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(227, t0, 0x8133feff228f7fc6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(228, t0, 0xfeff517f7f00a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(229, t0, 0xe37f7f0047123b00, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(230, t0, 0x7fcef8af03003124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(231, t0, 0xf5040300efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(232, t0, 0x36c35ffcc7f5500, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(233, t0, 0xdc6de57f4dacf82d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(234, t0, 0xea7f7f009c120334, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(235, t0, 0xb7009e1203f6feff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(236, t0, 0xf8fb0300feea7f72, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(237, t0, 0x3005c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(238, t0, 0xe7ffc12c7f00087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(239, t0, 0x7fb424c203320300, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(240, t0, 0x1, csrr t0, vxsat)


# Generating tests for VL: 127, LMUL: m8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 5616
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 5632
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 5760
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 5888
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 127
vsetvli t1, t0, e8,m8,tu,mu
vsadd.vv v24, v16, v8, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v24, (a0)


  TEST_CASE(241, t0, 0x7fd67fcbdd12bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(242, t0, 0x7fdccbfa03fffe31, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(243, t0, 0xf840fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(244, t0, 0x8133feff228f7fc6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(245, t0, 0xfeff517f7f00a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(246, t0, 0xe37f7f0047123b00, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(247, t0, 0x7fcef8af03003124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(248, t0, 0xf5040300efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(249, t0, 0x36c35ffcc7f5500, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(250, t0, 0xdc6de57f4dacf82d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(251, t0, 0xea7f7f009c120334, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(252, t0, 0xb7009e1203f6feff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(253, t0, 0xf8fb0300feea7f72, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(254, t0, 0x3005c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(255, t0, 0xe7ffc12c7f00087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(256, t0, 0x2cb424c203320300, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(257, t0, 0x1, csrr t0, vxsat)


# Generating tests for VL: 129, LMUL: m8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 6016
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 6032
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 6160
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 6288
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 129
vsetvli t1, t0, e8,m8,tu,mu
vsadd.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v8, (a0)


  TEST_CASE(258, t0, 0x7fac7f0032808a00, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(259, t0, 0x8300c0125b001295, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(260, t0, 0xf826035edcff7ff0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(261, t0, 0x39315ff7f9e4f70, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(262, t0, 0xfecc0b869800f8b1, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(263, t0, 0x81c41e68f8e40300, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(264, t0, 0x7f00386903000c93, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(265, t0, 0x86e3030045ff7f7f, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(266, t0, 0xb4b3fe08ee7fd100, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(267, t0, 0x4e47b57f7f75f841, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(268, t0, 0x7f7f7fce4312c9aa, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(269, t0, 0x7fb7f812037ea7ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(270, t0, 0xc12037afeaa897a, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(271, t0, 0x7f34fbff7f7f7fb8, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(272, t0, 0xfeff53235300cfec, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(273, t0, 0x7fe85ce71ba2d600, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(274, t0, 0x1, csrr t0, vxsat)


# Generating tests for VL: 75, LMUL: m8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 6416
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 6432
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 6560
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 6688
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 75
vsetvli t1, t0, e8,m8,tu,mu
vsadd.vv v16, v24, v8, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v16 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v16, (a0)


  TEST_CASE(275, t0, 0x7f174400f8128dbb, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(276, t0, 0xa800f89623fa44ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(277, t0, 0xd012cf008cff7f7f, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(278, t0, 0x3b560b6da647f86, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(279, t0, 0x2ba77f7f0d00f812, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(280, t0, 0x7f79b200f87bad05, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(281, t0, 0x7fb3f87c034afead, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(282, t0, 0x13125fe0fefff22a, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(283, t0, 0x6e6bc0ff7fd17f00, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(284, t0, 0x6a8dc0580a3877f7, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(285, t0, 0x7ec25d8d9e8da52f, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(286, t0, 0xaf44960bee8656a9, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(287, t0, 0xf097b54deafe76f4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(288, t0, 0x7bfe115275ba8e50, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(289, t0, 0x6d2a6b9e8a9c5951, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(290, t0, 0x6d1f8412ed80ca98, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(291, t0, 0x1, csrr t0, vxsat)


# Generating tests for VL: 93, LMUL: m8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 6816
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 6832
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 6960
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 7088
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 93
vsetvli t1, t0, e8,m8,tu,mu
vsadd.vv v24, v16, v8, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v24, (a0)


  TEST_CASE(292, t0, 0x7f7f7f00ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(293, t0, 0xf300f81203006231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(294, t0, 0xf840fa004cff7f1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(295, t0, 0x300a5ff7f7fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(296, t0, 0x7dff517f7f00f83d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(297, t0, 0x7fc07f00f8cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(298, t0, 0xcacef8af2800fe24, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(299, t0, 0xf51203f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(300, t0, 0x7600feffcc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(301, t0, 0xdcffe5fa7f00f812, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(302, t0, 0x7f875500f8120334, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(303, t0, 0xb7fb9e1203f6fe20, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(304, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(305, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(306, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(307, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(308, t0, 0x1, csrr t0, vxsat)


# Generating tests for VL: 56, LMUL: m8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 7216
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 7232
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 7360
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 7488
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 56
vsetvli t1, t0, e8,m8,tu,mu
vsadd.vv v24, v16, v8, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v24, (a0)


  TEST_CASE(309, t0, 0x7fd67fcbdd12bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(310, t0, 0x7fdccbfa03fffe31, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(311, t0, 0xf840fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(312, t0, 0x8133feff228f7fc6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(313, t0, 0xfeff517f7f00a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(314, t0, 0xe37f7f0047123b00, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(315, t0, 0x7fcef8af03003124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(316, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(317, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(318, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(319, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(320, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(321, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(322, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(323, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(324, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(325, t0, 0x1, csrr t0, vxsat)


# Generating tests for VL: 0, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 7616
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 7632
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 7760
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 7888
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v8, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,m8,tu,mu
vsadd.vv v24, v8, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v24, (a0)


  TEST_CASE(326, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(327, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(328, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(329, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(330, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(331, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(332, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(333, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(334, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(335, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(336, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(337, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(338, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(339, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(340, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(341, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(342, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 31, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 8016
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 8032
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 8160
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 8288
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 31
vsetvli t1, t0, e16,m8,tu,mu
vsadd.vv v24, v16, v8
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v24, (a0)


  TEST_CASE(343, t0, 0xfff8001200030000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(344, t0, 0x7fff7fff7fffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(345, t0, 0x30000fffeffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(346, t0, 0x7fffff78fff80012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(347, t0, 0xfffeffff7fff7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(348, t0, 0xfff8001200030000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(349, t0, 0x7fff7fff7fffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(350, t0, 0xbdb60000fffeffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(351, t0, 0xcb37206dd5cb276e, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(352, t0, 0xf7cb9b9c84ca381f, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(353, t0, 0xba9a947fdeff35b9, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(354, t0, 0x2b0efdc87c7f9379, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(355, t0, 0xc2029795432bb928, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(356, t0, 0xd540c53a7acca606, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(357, t0, 0x9b7f6b81ddab6bb0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(358, t0, 0x2304084233b2d4a5, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(359, t0, 0x1, csrr t0, vxsat)


# Generating tests for VL: 32, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 8416
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 8432
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 8560
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 8688
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 32
vsetvli t1, t0, e16,m8,tu,mu
vsadd.vv v24, v16, v8
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v24, (a0)


  TEST_CASE(360, t0, 0xfff8001200030000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(361, t0, 0x7fff7fff7fffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(362, t0, 0x30000fffeffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(363, t0, 0x7fffff78fff80012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(364, t0, 0xfffeffff7fff7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(365, t0, 0xfff8001200030000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(366, t0, 0x7fff7fff7fffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(367, t0, 0x30000fffeffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(368, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(369, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(370, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(371, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(372, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(373, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(374, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(375, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(376, t0, 0x1, csrr t0, vxsat)


# Generating tests for VL: 64, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 8816
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 8832
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 8960
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 9088
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 64
vsetvli t1, t0, e16,m8,tu,mu
vsadd.vv v24, v16, v8
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v24, (a0)


  TEST_CASE(377, t0, 0xfff8001200030000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(378, t0, 0x7fff7fff7fffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(379, t0, 0x30000fffeffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(380, t0, 0x7fffff78fff80012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(381, t0, 0xfffeffff7fff7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(382, t0, 0xfff8001200030000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(383, t0, 0x7fff7fff7fffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(384, t0, 0x30000fffeffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(385, t0, 0x7fffff78fff80012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(386, t0, 0xfffeffff7fff7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(387, t0, 0xfff8001200030000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(388, t0, 0x7fff7fff7fffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(389, t0, 0x30000fffeffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(390, t0, 0x7fffff78fff80012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(391, t0, 0xfffeffff7fff7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(392, t0, 0xfff8001200030000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(393, t0, 0x1, csrr t0, vxsat)


# Generating tests for VL: 63, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 9216
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 9232
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 9360
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 9488
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 63
vsetvli t1, t0, e16,m8,tu,mu
vsadd.vv v24, v16, v8
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v24, (a0)


  TEST_CASE(394, t0, 0xfff8001200030000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(395, t0, 0x7fff7fff7fffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(396, t0, 0x30000fffeffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(397, t0, 0x7fffff78fff80012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(398, t0, 0xfffeffff7fff7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(399, t0, 0xfff8001200030000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(400, t0, 0x7fff7fff7fffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(401, t0, 0x30000fffeffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(402, t0, 0x7fffff78fff80012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(403, t0, 0xfffeffff7fff7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(404, t0, 0xfff8001200030000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(405, t0, 0x7fff7fff7fffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(406, t0, 0x30000fffeffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(407, t0, 0x7fffff78fff80012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(408, t0, 0xfffeffff7fff7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(409, t0, 0x2cb4001200030000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(410, t0, 0x1, csrr t0, vxsat)


# Generating tests for VL: 65, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 9616
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 9632
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 9760
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 9888
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 65
vsetvli t1, t0, e16,m8,tu,mu
vsadd.vv v8, v16, v24
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(411, t0, 0xfff8001200030000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(412, t0, 0x7fff7fff7fffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(413, t0, 0x30000fffeffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(414, t0, 0x7fffff78fff80012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(415, t0, 0xfffeffff7fff7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(416, t0, 0xfff8001200030000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(417, t0, 0x7fff7fff7fffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(418, t0, 0x30000fffeffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(419, t0, 0x7fffff78fff80012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(420, t0, 0xfffeffff7fff7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(421, t0, 0xfff8001200030000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(422, t0, 0x7fff7fff7fffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(423, t0, 0x30000fffeffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(424, t0, 0x7fffff78fff80012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(425, t0, 0xfffeffff7fff7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(426, t0, 0xfff8001200030000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(427, t0, 0x1, csrr t0, vxsat)


# Generating tests for VL: 55, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 10016
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 10032
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 10160
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 10288
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v8, (a0)

# -------------- TEST BEGIN --------------
li t0, 55
vsetvli t1, t0, e16,m8,tu,mu
vsadd.vv v24, v8, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v24, (a0)


  TEST_CASE(428, t0, 0xfff8001200030000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(429, t0, 0x7fff7fff7fffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(430, t0, 0x30000fffeffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(431, t0, 0x7fffff78fff80012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(432, t0, 0xfffeffff7fff7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(433, t0, 0xfff8001200030000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(434, t0, 0x7fff7fff7fffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(435, t0, 0x30000fffeffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(436, t0, 0x7fffff78fff80012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(437, t0, 0xfffeffff7fff7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(438, t0, 0xfff8001200030000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(439, t0, 0x7fff7fff7fffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(440, t0, 0x30000fffeffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(441, t0, 0xd960ff78fff80012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(442, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(443, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(444, t0, 0x1, csrr t0, vxsat)


# Generating tests for VL: 36, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 10416
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 10432
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 10560
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 10688
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v8, (a0)

# -------------- TEST BEGIN --------------
li t0, 36
vsetvli t1, t0, e16,m8,tu,mu
vsadd.vv v24, v8, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v24, (a0)


  TEST_CASE(445, t0, 0xfff8001200030000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(446, t0, 0x7fff7fff7fffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(447, t0, 0x30000fffeffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(448, t0, 0x7fffff78fff80012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(449, t0, 0xfffeffff7fff7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(450, t0, 0xfff8001200030000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(451, t0, 0x7fff7fff7fffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(452, t0, 0x30000fffeffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(453, t0, 0x7fffff78fff80012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(454, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(455, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(456, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(457, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(458, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(459, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(460, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(461, t0, 0x1, csrr t0, vxsat)


# Generating tests for VL: 25, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 10816
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 10832
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 10960
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 11088
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 25
vsetvli t1, t0, e16,m8,tu,mu
vsadd.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(462, t0, 0xfff8001200030000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(463, t0, 0x7fff7fff7fffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(464, t0, 0x30000fffeffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(465, t0, 0x7fffff78fff80012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(466, t0, 0xfffeffff7fff7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(467, t0, 0xfff8001200030000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(468, t0, 0xcaced9af287dff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(469, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(470, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(471, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(472, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(473, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(474, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(475, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(476, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(477, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(478, t0, 0x1, csrr t0, vxsat)


# Generating tests for VL: 0, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 11216
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 11232
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 11360
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 11488
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,m8,tu,mu
vsadd.vv v8, v16, v24, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(479, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(480, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(481, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(482, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(483, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(484, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(485, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(486, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(487, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(488, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(489, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(490, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(491, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(492, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(493, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(494, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(495, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 31, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 11616
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 11632
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 11760
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 11888
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v8, (a0)

# -------------- TEST BEGIN --------------
li t0, 31
vsetvli t1, t0, e16,m8,tu,mu
vsadd.vv v24, v8, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v24, (a0)


  TEST_CASE(496, t0, 0x30ac001232808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(497, t0, 0x7fffc0aa7fff1295, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(498, t0, 0x3b85efffe7cf0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(499, t0, 0x7fff15af5a9e4f70, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(500, t0, 0x37cc0b8698a654b1, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(501, t0, 0xfff81e68b9e41a25, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(502, t0, 0xfc2338697fff0c93, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(503, t0, 0x86e31308fffeffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(504, t0, 0xb4b36d08ee4bd10e, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(505, t0, 0x4e47b55bd4754e41, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(506, t0, 0xbf9292ce430fc9aa, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(507, t0, 0x6fb72b91507ea741, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(508, t0, 0xce15d7a34aa897a, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(509, t0, 0x7f34fb38784d85b8, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(510, t0, 0xf1d653235345cfec, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(511, t0, 0x7ae85ce71ba2d65e, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(512, t0, 0x1, csrr t0, vxsat)


# Generating tests for VL: 32, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 12016
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 12032
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 12160
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 12288
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 32
vsetvli t1, t0, e16,m8,tu,mu
vsadd.vv v24, v16, v8, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v24, (a0)


  TEST_CASE(513, t0, 0x3ad60012ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(514, t0, 0x7fffcbfa7fff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(515, t0, 0x3fa12fffedc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(516, t0, 0x7fffa51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(517, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(518, t0, 0xfff8d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(519, t0, 0xcaced9af7fff3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(520, t0, 0xf50471f1fffeffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(521, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(522, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(523, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(524, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(525, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(526, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(527, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(528, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(529, t0, 0x1, csrr t0, vxsat)


# Generating tests for VL: 64, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 12416
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 12432
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 12560
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 12688
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v8, (a0)

# -------------- TEST BEGIN --------------
li t0, 64
vsetvli t1, t0, e16,m8,tu,mu
vsadd.vv v24, v8, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v24, (a0)


  TEST_CASE(530, t0, 0x3ad60012ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(531, t0, 0x7fffcbfa7fff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(532, t0, 0x3fa12fffedc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(533, t0, 0x7fffa51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(534, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(535, t0, 0xfff8d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(536, t0, 0xcaced9af7fff3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(537, t0, 0xf50471f1fffeffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(538, t0, 0x7fffff78cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(539, t0, 0xfffeffff4dac7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(540, t0, 0xea8700129cce0000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(541, t0, 0xb7fb7fff7fffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(542, t0, 0x300004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(543, t0, 0x7fff5c57fff80392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(544, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(545, t0, 0x2cb424c200030000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(546, t0, 0x1, csrr t0, vxsat)


# Generating tests for VL: 63, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 12816
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 12832
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 12960
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 13088
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 63
vsetvli t1, t0, e16,m8,tu,mu
vsadd.vv v24, v16, v8, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v24, (a0)


  TEST_CASE(547, t0, 0x3ad60012ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(548, t0, 0x7fffcbfa7fff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(549, t0, 0x3fa12fffedc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(550, t0, 0x7fffa51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(551, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(552, t0, 0xfff8d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(553, t0, 0xcaced9af7fff3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(554, t0, 0xf50471f1fffeffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(555, t0, 0x7fffff78cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(556, t0, 0xfffeffff4dac7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(557, t0, 0xea8700129cce0000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(558, t0, 0xb7fb7fff7fffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(559, t0, 0x300004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(560, t0, 0x7fff5c57fff80392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(561, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(562, t0, 0x2cb424c200030000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(563, t0, 0x1, csrr t0, vxsat)


# Generating tests for VL: 65, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 13216
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 13232
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 13360
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 13488
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 65
vsetvli t1, t0, e16,m8,tu,mu
vsadd.vv v24, v16, v8, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v24, (a0)


  TEST_CASE(564, t0, 0x3ad60012ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(565, t0, 0x7fffcbfa7fff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(566, t0, 0x3fa12fffedc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(567, t0, 0x7fffa51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(568, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(569, t0, 0xfff8d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(570, t0, 0xcaced9af7fff3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(571, t0, 0xf50471f1fffeffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(572, t0, 0x7fffff78cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(573, t0, 0xfffeffff4dac7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(574, t0, 0xea8700129cce0000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(575, t0, 0xb7fb7fff7fffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(576, t0, 0x300004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(577, t0, 0x7fff5c57fff80392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(578, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(579, t0, 0x2cb424c200030000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(580, t0, 0x1, csrr t0, vxsat)


# Generating tests for VL: 55, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 13616
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 13632
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 13760
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 13888
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 55
vsetvli t1, t0, e16,m8,tu,mu
vsadd.vv v24, v16, v8, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v24, (a0)


  TEST_CASE(581, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(582, t0, 0x7fff7fff7fffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(583, t0, 0x300004cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(584, t0, 0x8133ff78fff80012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(585, t0, 0x7d11ffff7fffa93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(586, t0, 0xfff8d40947cd0000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(587, t0, 0x7fff7fff287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(588, t0, 0x30000efe9ffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(589, t0, 0x7fffff78fff855f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(590, t0, 0xdc6dffff4dac7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(591, t0, 0xfff855309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(592, t0, 0x7fff9e957fffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(593, t0, 0xb0fb0000fffe0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(594, t0, 0xd9605c57fff80392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(595, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(596, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(597, t0, 0x1, csrr t0, vxsat)


# Generating tests for VL: 36, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 14016
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 14032
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 14160
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 14288
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 36
vsetvli t1, t0, e16,m8,tu,mu
vsadd.vv v24, v16, v8, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v24, (a0)


  TEST_CASE(598, t0, 0x3ad60012ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(599, t0, 0x7fffcbfa7fff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(600, t0, 0x3fa12fffedc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(601, t0, 0x7fffa51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(602, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(603, t0, 0xfff8d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(604, t0, 0xcaced9af7fff3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(605, t0, 0xf50471f1fffeffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(606, t0, 0x7fffff78cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(607, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(608, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(609, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(610, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(611, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(612, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(613, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(614, t0, 0x1, csrr t0, vxsat)


# Generating tests for VL: 25, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 14416
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 14432
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 14560
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 14688
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 25
vsetvli t1, t0, e16,m8,tu,mu
vsadd.vv v8, v16, v24, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(615, t0, 0x3ad60012ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(616, t0, 0x7fffcbfa7fff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(617, t0, 0x3fa12fffedc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(618, t0, 0x7fffa51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(619, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(620, t0, 0xfff8d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(621, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(622, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(623, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(624, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(625, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(626, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(627, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(628, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(629, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(630, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(631, t0, 0x1, csrr t0, vxsat)


# Generating tests for VL: 0, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 14816
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 14832
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 14960
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 15088
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e32,m8,tu,mu
vsadd.vv v24, v16, v8
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v24, (a0)


  TEST_CASE(632, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(633, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(634, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(635, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(636, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(637, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(638, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(639, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(640, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(641, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(642, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(643, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(644, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(645, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(646, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(647, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(648, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 15, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 15216
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 15232
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 15360
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 15488
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e32,m8,tu,mu
vsadd.vv v24, v16, v8
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v24, (a0)


  TEST_CASE(649, t0, 0x300000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(650, t0, 0xfffffff800000012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(651, t0, 0x7fffffffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(652, t0, 0x8000000087fe, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(653, t0, 0xfffffffeffffffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(654, t0, 0x300000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(655, t0, 0xfffffff800000012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(656, t0, 0xf50471f1ffffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(657, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(658, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(659, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(660, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(661, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(662, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(663, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(664, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(665, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 16, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 15616
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 15632
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 15760
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 15888
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v8, (a0)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e32,m8,tu,mu
vsadd.vv v16, v8, v24
# -------------- TEST END   --------------
la a0, resultdata

# Store v16 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v16, (a0)


  TEST_CASE(666, t0, 0x300000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(667, t0, 0xfffffff800000012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(668, t0, 0x7fffffffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(669, t0, 0x8000000087fe, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(670, t0, 0xfffffffeffffffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(671, t0, 0x300000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(672, t0, 0xfffffff800000012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(673, t0, 0x7fffffffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(674, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(675, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(676, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(677, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(678, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(679, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(680, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(681, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(682, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 32, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 16016
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 16032
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 16160
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 16288
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 32
vsetvli t1, t0, e32,m8,tu,mu
vsadd.vv v24, v16, v8
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v24, (a0)


  TEST_CASE(683, t0, 0x300000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(684, t0, 0xfffffff800000012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(685, t0, 0x7fffffffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(686, t0, 0x8000000087fe, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(687, t0, 0xfffffffeffffffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(688, t0, 0x300000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(689, t0, 0xfffffff800000012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(690, t0, 0x7fffffffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(691, t0, 0x8000000087fe, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(692, t0, 0xfffffffeffffffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(693, t0, 0x300000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(694, t0, 0xfffffff800000012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(695, t0, 0x7fffffffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(696, t0, 0x8000000087fe, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(697, t0, 0xfffffffeffffffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(698, t0, 0x300000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(699, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 31, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 16416
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 16432
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 16560
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 16688
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 31
vsetvli t1, t0, e32,m8,tu,mu
vsadd.vv v24, v16, v8
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v24, (a0)


  TEST_CASE(700, t0, 0x300000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(701, t0, 0xfffffff800000012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(702, t0, 0x7fffffffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(703, t0, 0x8000000087fe, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(704, t0, 0xfffffffeffffffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(705, t0, 0x300000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(706, t0, 0xfffffff800000012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(707, t0, 0x7fffffffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(708, t0, 0x8000000087fe, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(709, t0, 0xfffffffeffffffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(710, t0, 0x300000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(711, t0, 0xfffffff800000012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(712, t0, 0x7fffffffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(713, t0, 0x8000000087fe, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(714, t0, 0xfffffffeffffffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(715, t0, 0x2cb424c200000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(716, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 33, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 16816
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 16832
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 16960
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 17088
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 33
vsetvli t1, t0, e32,m8,tu,mu
vsadd.vv v24, v16, v8
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v24, (a0)


  TEST_CASE(717, t0, 0x300000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(718, t0, 0xfffffff800000012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(719, t0, 0x7fffffffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(720, t0, 0x8000000087fe, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(721, t0, 0xfffffffeffffffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(722, t0, 0x300000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(723, t0, 0xfffffff800000012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(724, t0, 0x7fffffffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(725, t0, 0x8000000087fe, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(726, t0, 0xfffffffeffffffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(727, t0, 0x300000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(728, t0, 0xfffffff800000012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(729, t0, 0x7fffffffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(730, t0, 0x8000000087fe, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(731, t0, 0xfffffffeffffffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(732, t0, 0x300000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(733, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 2, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 17216
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 17232
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 17360
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 17488
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 2
vsetvli t1, t0, e32,m8,tu,mu
vsadd.vv v24, v16, v8
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v24, (a0)


  TEST_CASE(734, t0, 0x300000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(735, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(736, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(737, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(738, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(739, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(740, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(741, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(742, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(743, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(744, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(745, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(746, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(747, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(748, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(749, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(750, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 3, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 17616
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 17632
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 17760
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 17888
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 3
vsetvli t1, t0, e32,m8,tu,mu
vsadd.vv v24, v16, v8
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v24, (a0)


  TEST_CASE(751, t0, 0x300000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(752, t0, 0xf3dccbfa00000012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(753, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(754, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(755, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(756, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(757, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(758, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(759, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(760, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(761, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(762, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(763, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(764, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(765, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(766, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(767, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 5, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 18016
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 18032
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 18160
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 18288
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 5
vsetvli t1, t0, e32,m8,tu,mu
vsadd.vv v24, v16, v8
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v24, (a0)


  TEST_CASE(768, t0, 0x300000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(769, t0, 0xfffffff800000012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(770, t0, 0xa340fa12ffffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(771, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(772, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(773, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(774, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(775, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(776, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(777, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(778, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(779, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(780, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(781, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(782, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(783, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(784, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 0, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 18416
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 18432
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 18560
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 18688
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e32,m8,tu,mu
vsadd.vv v24, v16, v8, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v24, (a0)


  TEST_CASE(785, t0, 0x6026b85edc967cf0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(786, t0, 0x329315af5a9e4f70, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(787, t0, 0x37cc0b8698a654b1, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(788, t0, 0x81c41e68b9e41a25, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(789, t0, 0xfc233869fa4c0c93, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(790, t0, 0x86e3130845d6f39f, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(791, t0, 0xb4b36d08ee4bd10e, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(792, t0, 0x4e47b55bd4754e41, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(793, t0, 0xbf9292ce430fc9aa, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(794, t0, 0x6fb72b91507ea741, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(795, t0, 0xce15d7a34aa897a, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(796, t0, 0x7f34fb38784d85b8, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(797, t0, 0xf1d653235345cfec, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(798, t0, 0x7ae85ce71ba2d65e, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(799, t0, 0xb110a63d3b02b3a5, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(800, t0, 0x614ef8ba9c793e38, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(801, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 15, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 18816
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 18832
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 18960
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 19088
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e32,m8,tu,mu
vsadd.vv v24, v16, v8, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v24, (a0)


  TEST_CASE(802, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(803, t0, 0xf3dccbfa00000012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(804, t0, 0x7fff4cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(805, t0, 0x8000228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(806, t0, 0xfffffffeb866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(807, t0, 0x347cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(808, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(809, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(810, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(811, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(812, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(813, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(814, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(815, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(816, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(817, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(818, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 16, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 19216
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 19232
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 19360
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 19488
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v8, (a0)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e32,m8,tu,mu
vsadd.vv v16, v8, v24, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v16 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v16, (a0)


  TEST_CASE(819, t0, 0x34aa74d85, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(820, t0, 0xfffffff800000012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(821, t0, 0x7fffffffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(822, t0, 0xe849bd2b052b11fb, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(823, t0, 0xfffffffe276ebdb6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(824, t0, 0x9b9c84ca00000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(825, t0, 0x947fdeff00000012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(826, t0, 0xfdc87c7f9379ba9a, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(827, t0, 0x9795432bb9282b0e, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(828, t0, 0xc53a7acca606c202, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(829, t0, 0x6b81ddab6bb0d540, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(830, t0, 0x84233b2d4a59b7f, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(831, t0, 0xa5d09036bec32304, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(832, t0, 0x3ed4d63f563b40d7, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(833, t0, 0x91778f36d57c50fe, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(834, t0, 0xbda05f21bec3cd89, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(835, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 32, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 19616
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 19632
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 19760
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 19888
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 32
vsetvli t1, t0, e32,m8,tu,mu
vsadd.vv v24, v16, v8, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v24, (a0)


  TEST_CASE(836, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(837, t0, 0xf3dccbfa00000012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(838, t0, 0x7fff4cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(839, t0, 0x8000228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(840, t0, 0xfffffffeb866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(841, t0, 0x347cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(842, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(843, t0, 0x7fffefe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(844, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(845, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(846, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(847, t0, 0xfffffff8d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(848, t0, 0x7fff4aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(849, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(850, t0, 0xfffffffeffffffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(851, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(852, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 31, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 20016
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 20032
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 20160
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 20288
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 31
vsetvli t1, t0, e32,m8,tu,mu
vsadd.vv v24, v16, v8, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v24, (a0)


  TEST_CASE(853, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(854, t0, 0xf3dccbfa00000012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(855, t0, 0x7fff4cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(856, t0, 0x8000228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(857, t0, 0xfffffffeb866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(858, t0, 0x347cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(859, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(860, t0, 0x7fffefe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(861, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(862, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(863, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(864, t0, 0xfffffff8d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(865, t0, 0x7fff4aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(866, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(867, t0, 0xfffffffeffffffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(868, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(869, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 33, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 20416
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 20432
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 20560
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 20688
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 33
vsetvli t1, t0, e32,m8,tu,mu
vsadd.vv v24, v16, v8, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v24, (a0)


  TEST_CASE(870, t0, 0x3ad64ccb00000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(871, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(872, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(873, t0, 0x8133a51e000087fe, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(874, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(875, t0, 0x347cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(876, t0, 0xfffffff8287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(877, t0, 0xf50471f1ffffff78, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(878, t0, 0x8000000087fe, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(879, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(880, t0, 0x300000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(881, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(882, t0, 0x7fff4aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(883, t0, 0x8000e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(884, t0, 0xfffffffe7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(885, t0, 0x30332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(886, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 2, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 20816
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 20832
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 20960
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 21088
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 2
vsetvli t1, t0, e32,m8,tu,mu
vsadd.vv v24, v16, v8, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v24, (a0)


  TEST_CASE(887, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(888, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(889, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(890, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(891, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(892, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(893, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(894, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(895, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(896, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(897, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(898, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(899, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(900, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(901, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(902, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(903, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 3, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 21216
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 21232
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 21360
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 21488
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 3
vsetvli t1, t0, e32,m8,tu,mu
vsadd.vv v24, v16, v8, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v24, (a0)


  TEST_CASE(904, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(905, t0, 0xf3dccbfa00000012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(906, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(907, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(908, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(909, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(910, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(911, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(912, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(913, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(914, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(915, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(916, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(917, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(918, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(919, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(920, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 5, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 21616
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 21632
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 21760
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 21888
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 5
vsetvli t1, t0, e32,m8,tu,mu
vsadd.vv v24, v16, v8, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v24, (a0)


  TEST_CASE(921, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(922, t0, 0xf3dccbfa00000012, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(923, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(924, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(925, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(926, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(927, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(928, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(929, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(930, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(931, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(932, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(933, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(934, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(935, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(936, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(937, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 0, LMUL: m8, SEW: e64, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 22016
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 22032
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 22160
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 22288
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e64,m8,tu,mu
vsadd.vv v24, v16, v8
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vse64.v v24, (a0)


  TEST_CASE(938, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(939, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(940, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(941, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(942, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(943, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(944, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(945, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(946, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(947, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(948, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(949, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(950, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(951, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(952, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(953, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(954, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 7, LMUL: m8, SEW: e64, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 22416
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 22432
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 22560
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 22688
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e64,m8,tu,mu
vsadd.vv v24, v16, v8
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vse64.v v24, (a0)


  TEST_CASE(955, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(956, t0, 0x3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(957, t0, 0x12, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(958, t0, 0xffffffffffff8000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(959, t0, 0xffffffff80000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(960, t0, 0xffffffff7fff8000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(961, t0, 0x7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(962, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(963, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(964, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(965, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(966, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(967, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(968, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(969, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(970, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(971, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 8, LMUL: m8, SEW: e64, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 22816
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 22832
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 22960
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 23088
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e64,m8,tu,mu
vsadd.vv v24, v16, v8
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vse64.v v24, (a0)


  TEST_CASE(972, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(973, t0, 0x3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(974, t0, 0x12, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(975, t0, 0xffffffffffff8000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(976, t0, 0xffffffff80000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(977, t0, 0xffffffff7fff8000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(978, t0, 0x7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(979, t0, 0x80007ffe, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(980, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(981, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(982, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(983, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(984, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(985, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(986, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(987, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(988, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 16, LMUL: m8, SEW: e64, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 23216
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 23232
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 23360
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 23488
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e64,m8,tu,mu
vsadd.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vse64.v v8, (a0)


  TEST_CASE(989, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(990, t0, 0x3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(991, t0, 0x12, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(992, t0, 0xffffffffffff8000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(993, t0, 0xffffffff80000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(994, t0, 0xffffffff7fff8000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(995, t0, 0x7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(996, t0, 0x80007ffe, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(997, t0, 0xffffffff80007fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(998, t0, 0x7fff7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(999, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1000, t0, 0xffffffffffffffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1001, t0, 0xfffffffffffffffe, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1002, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1003, t0, 0x3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1004, t0, 0x12, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1005, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 15, LMUL: m8, SEW: e64, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 23616
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 23632
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 23760
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 23888
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e64,m8,tu,mu
vsadd.vv v24, v16, v8
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vse64.v v24, (a0)


  TEST_CASE(1006, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1007, t0, 0x3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1008, t0, 0x12, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1009, t0, 0xffffffffffff8000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1010, t0, 0xffffffff80000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1011, t0, 0xffffffff7fff8000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1012, t0, 0x7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1013, t0, 0x80007ffe, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1014, t0, 0xffffffff80007fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1015, t0, 0x7fff7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1016, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1017, t0, 0xffffffffffffffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1018, t0, 0xfffffffffffffffe, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1019, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1020, t0, 0x3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1021, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1022, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 17, LMUL: m8, SEW: e64, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 24016
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 24032
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 24160
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 24288
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e64,m8,tu,mu
vsadd.vv v24, v16, v8
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vse64.v v24, (a0)


  TEST_CASE(1023, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1024, t0, 0x3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1025, t0, 0x12, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1026, t0, 0xffffffffffff8000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1027, t0, 0xffffffff80000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1028, t0, 0xffffffff7fff8000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1029, t0, 0x7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1030, t0, 0x80007ffe, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1031, t0, 0xffffffff80007fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1032, t0, 0x7fff7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1033, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1034, t0, 0xffffffffffffffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1035, t0, 0xfffffffffffffffe, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1036, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1037, t0, 0x3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1038, t0, 0x12, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1039, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 12, LMUL: m8, SEW: e64, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 24416
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 24432
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 24560
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 24688
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v8, (a0)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e64,m8,tu,mu
vsadd.vv v24, v8, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vse64.v v24, (a0)


  TEST_CASE(1040, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1041, t0, 0x3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1042, t0, 0x12, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1043, t0, 0xffffffffffff8000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1044, t0, 0xffffffff80000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1045, t0, 0xffffffff7fff8000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1046, t0, 0x7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1047, t0, 0x80007ffe, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1048, t0, 0xffffffff80007fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1049, t0, 0x7fff7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1050, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1051, t0, 0xffffffffffffffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1052, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1053, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1054, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1055, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1056, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 11, LMUL: m8, SEW: e64, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 24816
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 24832
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 24960
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 25088
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e64,m8,tu,mu
vsadd.vv v24, v16, v8
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vse64.v v24, (a0)


  TEST_CASE(1057, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1058, t0, 0x3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1059, t0, 0x12, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1060, t0, 0xffffffffffff8000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1061, t0, 0xffffffff80000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1062, t0, 0xffffffff7fff8000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1063, t0, 0x7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1064, t0, 0x80007ffe, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1065, t0, 0xffffffff80007fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1066, t0, 0x7fff7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1067, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1068, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1069, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1070, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1071, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1072, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1073, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 6, LMUL: m8, SEW: e64, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 25216
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 25232
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 25360
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 25488
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e64,m8,tu,mu
vsadd.vv v8, v16, v24
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vse64.v v8, (a0)


  TEST_CASE(1074, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1075, t0, 0x3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1076, t0, 0x12, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1077, t0, 0xffffffffffff8000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1078, t0, 0xffffffff80000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1079, t0, 0xffffffff7fff8000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1080, t0, 0xd1004aea0272b7fb, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1081, t0, 0x5c57e4400392b0fb, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1082, t0, 0xc12c7f8e087cd960, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1083, t0, 0x24c20332619ce7da, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1084, t0, 0x14be7a8e62892cb4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1085, t0, 0x25fba24ee7b08275, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1086, t0, 0x669d9bfc3fbbf9ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1087, t0, 0xf32e585b001e86ad, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1088, t0, 0x90cde1662ea74d85, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1089, t0, 0x74bc68e6b84a92a7, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1090, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 0, LMUL: m8, SEW: e64, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 25616
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 25632
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 25760
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 25888
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e64,m8,tu,mu
vsadd.vv v8, v16, v24, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vse64.v v8, (a0)


  TEST_CASE(1091, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1092, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1093, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1094, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1095, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1096, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1097, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1098, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1099, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1100, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1101, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1102, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1103, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1104, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1105, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1106, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1107, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 7, LMUL: m8, SEW: e64, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 26016
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 26032
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 26160
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 26288
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e64,m8,tu,mu
vsadd.vv v24, v16, v8, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vse64.v v24, (a0)


  TEST_CASE(1108, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1109, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1110, t0, 0x12, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1111, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1112, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1113, t0, 0xffffffff7fff8000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1114, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1115, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1116, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1117, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1118, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1119, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1120, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1121, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1122, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1123, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1124, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 8, LMUL: m8, SEW: e64, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 26416
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 26432
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 26560
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 26688
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e64,m8,tu,mu
vsadd.vv v24, v16, v8, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vse64.v v24, (a0)


  TEST_CASE(1125, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1126, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1127, t0, 0x12, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1128, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1129, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1130, t0, 0xffffffff7fff8000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1131, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1132, t0, 0x80007ffe, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1133, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1134, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1135, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1136, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1137, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1138, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1139, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1140, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1141, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 16, LMUL: m8, SEW: e64, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 26816
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 26832
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 26960
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 27088
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e64,m8,tu,mu
vsadd.vv v24, v16, v8, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vse64.v v24, (a0)


  TEST_CASE(1142, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1143, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1144, t0, 0x12, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1145, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1146, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1147, t0, 0xffffffff7fff8000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1148, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1149, t0, 0x80007ffe, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1150, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1151, t0, 0x7fff7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1152, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1153, t0, 0xffffffffffffffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1154, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1155, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1156, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1157, t0, 0x12, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1158, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 15, LMUL: m8, SEW: e64, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 27216
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 27232
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 27360
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 27488
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e64,m8,tu,mu
vsadd.vv v24, v16, v8, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vse64.v v24, (a0)


  TEST_CASE(1159, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1160, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1161, t0, 0x12, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1162, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1163, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1164, t0, 0xffffffff7fff8000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1165, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1166, t0, 0x80007ffe, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1167, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1168, t0, 0x7fff7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1169, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1170, t0, 0xffffffffffffffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1171, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1172, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1173, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1174, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1175, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 17, LMUL: m8, SEW: e64, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 27616
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 27632
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 27760
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 27888
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e64,m8,tu,mu
vsadd.vv v24, v16, v8, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vse64.v v24, (a0)


  TEST_CASE(1176, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1177, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1178, t0, 0x12, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1179, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1180, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1181, t0, 0xffffffff7fff8000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1182, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1183, t0, 0x80007ffe, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1184, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1185, t0, 0x7fff7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1186, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1187, t0, 0xffffffffffffffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1188, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1189, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1190, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1191, t0, 0x12, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1192, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 12, LMUL: m8, SEW: e64, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 28016
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 28032
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 28160
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 28288
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e64,m8,tu,mu
vsadd.vv v24, v16, v8, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vse64.v v24, (a0)


  TEST_CASE(1193, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1194, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1195, t0, 0x12, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1196, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1197, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1198, t0, 0xffffffff7fff8000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1199, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1200, t0, 0x80007ffe, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1201, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1202, t0, 0x7fff7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1203, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1204, t0, 0xffffffffffffffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1205, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1206, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1207, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1208, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1209, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 11, LMUL: m8, SEW: e64, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 28416
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 28432
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 28560
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 28688
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e64,m8,tu,mu
vsadd.vv v24, v16, v8, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vse64.v v24, (a0)


  TEST_CASE(1210, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1211, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1212, t0, 0x12, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1213, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1214, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1215, t0, 0xffffffff7fff8000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1216, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1217, t0, 0x80007ffe, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1218, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1219, t0, 0x7fff7fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1220, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1221, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1222, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1223, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1224, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1225, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1226, t0, 0x0, csrr t0, vxsat)


# Generating tests for VL: 6, LMUL: m8, SEW: e64, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Clear vxsat CSR
csrci vxsat, 1

# Move a0 to test data area.
la a0, testdata
li a5, 28816
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 28832
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 28960
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 29088
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v16, (a0)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e64,m8,tu,mu
vsadd.vv v24, v16, v8, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v24 register group into result data area.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vse64.v v24, (a0)


  TEST_CASE(1227, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1228, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1229, t0, 0x12, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1230, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1231, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1232, t0, 0xffffffff7fff8000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1233, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1234, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1235, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1236, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1237, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1238, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1239, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1240, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1241, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1242, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1243, t0, 0x0, csrr t0, vxsat)



  TEST_PASSFAIL
RVTEST_CODE_END

  .data
RVTEST_DATA_BEGIN

# Reserve space for test data.
resultdata:
  .zero 128

testdata:
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0xffffffffffff8000
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x7fff
  .quad 0x7fffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0x7fff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0xffffffffffff8000
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x7fff
  .quad 0x7fffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0x7fff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x37cc0b8698a654b1
  .quad 0x81c41e68b9e41a25
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x6026b85edc967cf0
  .quad 0x329315af5a9e4f70
  .quad 0x37cc0b8698a654b1
  .quad 0x81c41e68b9e41a25
  .quad 0xfc233869fa4c0c93
  .quad 0x86e3130845d6f39f
  .quad 0xb4b36d08ee4bd10e
  .quad 0x4e47b55bd4754e41
  .quad 0xbf9292ce430fc9aa
  .quad 0x6fb72b91507ea741
  .quad 0xce15d7a34aa897a
  .quad 0x7f34fb38784d85b8
  .quad 0xf1d653235345cfec
  .quad 0x7ae85ce71ba2d65e
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xcc17442d42408dbb
  .quad 0xa8438f9623fa4465
  .quad 0xd0abcfdb8cfdfd83
  .quad 0x85b560b6da64c686
  .quad 0x2ba75b080d7213bb
  .quad 0x8c79b2c5937bad05
  .quad 0x40b3627cdc4a4bad
  .quad 0x139d5fe06870f22a
  .quad 0x6e6bc0d31ad1eee6
  .quad 0x6a8dc0580a3877f7
  .quad 0x7ec25d8d9e8da52f
  .quad 0xaf44960bee8656a9
  .quad 0xf097b54deafe76f4
  .quad 0x7bfe115275ba8e50
  .quad 0x6d2a6b9e8a9c5951
  .quad 0x6d1f8412ed80ca98
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x6026b85edc967cf0
  .quad 0x329315af5a9e4f70
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x7ff8f8030100ffff
  .quad 0xf8030100ffff7f7f
  .quad 0x100ffff7f7f7ff8
  .quad 0xffff7f7f7ff8f803
  .quad 0x7f7f7ff8f8030100
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x8000f0200ff00
  .quad 0xf0200ff000107
  .quad 0x200ff0001070008
  .quad 0xff0001070008000f
  .quad 0x1070008000f0200
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff25fba24ee7b082
  .quad 0xad669d9bfc3fbbf9
  .quad 0x85f32e585b001e86
  .quad 0xa790cde1662ea74d
  .quad 0xa174bc68e6b84a92
  .quad 0xf19f7c0bac2a2540
  .quad 0x11fbbf60038b38e2
  .quad 0xbdb6e849bd2b052b
  .quad 0xcb37206dd5cb276e
  .quad 0xf7cb9b9c84ca381f
  .quad 0xba9a947fdeff35b9
  .quad 0x2b0efdc87c7f9379
  .quad 0xc2029795432bb928
  .quad 0xd540c53a7acca606
  .quad 0x9b7f6b81ddab6bb0
  .quad 0x2304084233b2d4a5
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0xaf26ce1d9c7d80e2
  .quad 0x3ec211fed481ca00
  .quad 0xc41e68b9e41a2537
  .quad 0x233869fa4c0c9381
  .quad 0xe3130845d6f39ffc
  .quad 0xb36d08ee4bd10e86
  .quad 0x47b55bd4754e41b4
  .quad 0x9292ce430fc9aa4e
  .quad 0xb72b91507ea741bf
  .quad 0xe15d7a34aa897a6f
  .quad 0x34fb38784d85b80c
  .quad 0xd653235345cfec7f
  .quad 0xe85ce71ba2d65ef1
  .quad 0x10a63d3b02b3a57a
  .quad 0x4ef8ba9c793e38b1
  .quad 0x5bf4824f159d1b61
  .quad 0xda51cc28e6fa7908
  .quad 0x36e48e6b22323fd
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0xfc0e25c3b2389752
  .quad 0x7f6b9acf1aa758a6
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x6026b85edc967cf0
  .quad 0x329315af5a9e4f70
  .quad 0x37cc0b8698a654b1
  .quad 0x81c41e68b9e41a25
  .quad 0xfc233869fa4c0c93
  .quad 0x86e3130845d6f39f
  .quad 0xb4b36d08ee4bd10e
  .quad 0x4e47b55bd4754e41
  .quad 0xbf9292ce430fc9aa
  .quad 0x6fb72b91507ea741
  .quad 0xce15d7a34aa897a
  .quad 0x7f34fb38784d85b8
  .quad 0xf1d653235345cfec
  .quad 0x7ae85ce71ba2d65e
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x6026b85edc967cf0
  .quad 0x329315af5a9e4f70
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0x7fff7fff7fffff80
  .quad 0x10000ffffffff
  .quad 0x7fffff80fff80003
  .quad 0xffffffff7fff7fff
  .quad 0xfff8000300010000
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x107ff0000fff8
  .quad 0x20000ffff0000
  .quad 0xfff80000000f
  .quad 0xffff0000000107ff
  .quad 0xf00020000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xc4471a05aa336841
  .quad 0xe04f4e1de7449153
  .quad 0xc9a4071dc384faa5
  .quad 0x8639daff0f0a714f
  .quad 0xbcedeea38defa9d3
  .quad 0xaa7440b4bd2a04d9
  .quad 0x223f5870d8d25f17
  .quad 0x1ec7e3165c741bf4
  .quad 0xf1e4dfcbea3b8c95
  .quad 0x86f3991cf4d86b96
  .quad 0x12a5ff34a1cbebc4
  .quad 0x708cf284d514503f
  .quad 0x24c9be669b052927
  .quad 0x3166106f80370701
  .quad 0x583100519c4b704d
  .quad 0x9e231cb7dcf9566c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x6026b85edc967cf0
  .quad 0x329315af5a9e4f70
  .quad 0x37cc0b8698a654b1
  .quad 0x81c41e68b9e41a25
  .quad 0xfc233869fa4c0c93
  .quad 0x86e3130845d6f39f
  .quad 0xb4b36d08ee4bd10e
  .quad 0x4e47b55bd4754e41
  .quad 0xbf9292ce430fc9aa
  .quad 0x6fb72b91507ea741
  .quad 0xce15d7a34aa897a
  .quad 0x7f34fb38784d85b8
  .quad 0xf1d653235345cfec
  .quad 0x7ae85ce71ba2d65e
  .quad 0xb110a63d3b02b3a5
  .quad 0x614ef8ba9c793e38
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0x4058009af074163e
  .quad 0x6d7988d1066fc792
  .quad 0xbc68e6b84aa74d85
  .quad 0x7c0bac2a2540a174
  .quad 0xbf60038b38e2f19f
  .quad 0xe849bd2b052b11fb
  .quad 0x206dd5cb276ebdb6
  .quad 0x9b9c84ca381fcb37
  .quad 0x947fdeff35b9f7cb
  .quad 0xfdc87c7f9379ba9a
  .quad 0x9795432bb9282b0e
  .quad 0xc53a7acca606c202
  .quad 0x6b81ddab6bb0d540
  .quad 0x84233b2d4a59b7f
  .quad 0xa5d09036bec32304
  .quad 0x3ed4d63f563b40d7
  .quad 0x91778f36d57c50fe
  .quad 0xbda05f21bec3cd89
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xc4471a05aa336841
  .quad 0xe04f4e1de7449153
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0x9713eb9e7832b424
  .quad 0x42e7b99671214704
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0x7fffffffff80
  .quad 0x7fff00007fff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0xf
  .quad 0xfffffff8
  .quad 0x1000007ff
  .quad 0xffffffff00000000
  .quad 0x200000000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0xffffffffffff8000
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x7fff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0x1
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0xffffffffffff8000
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x7fff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0x1
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0xffffffffffff8000
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x7fff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0x1
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x38b19f1d95640d39
  .quad 0xa9c498aa9b9307fd
  .quad 0x29f5caf4fff46aeb
  .quad 0x2bacea4ca1cb8806
  .quad 0xdfaaccc5b212b8a8
  .quad 0x52d203c20df75b85
  .quad 0x381d355111f5ce90
  .quad 0xae97a1a66a106bb9
  .quad 0x222f72acb50e61d0
  .quad 0x39f613e8661f5f8f
  .quad 0xa5643ed02033b8e5
  .quad 0x17436045fcdce2e9
  .quad 0xf8477cf3cb4eca74
  .quad 0x17442d42408dbb5e
  .quad 0x438f9623fa4465cc
  .quad 0xabcfdb8cfdfd83a8
  .quad 0xb560b6da64c686d0
  .quad 0xa75b080d7213bb85
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0xffffffffffff8000
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x7fff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0x1
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0xffffffffffff8000
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x7fff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0x1
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0xffffffffffff8000
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x7fff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0x1
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0xffffffffffff8000
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x7fff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0x1
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0xffffffffffff8000
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x7fff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0x1
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xd9af287d313b177d
  .quad 0x71f1efe95ed0cace
  .quad 0x35e5cc4055f3f504
  .quad 0xe5fa4dac412d766c
  .quad 0x55309ccef534dc6d
  .quad 0x9e95d8f62420ea87
  .quad 0xd1004aea0272b7fb
  .quad 0x5c57e4400392b0fb
  .quad 0xc12c7f8e087cd960
  .quad 0x24c20332619ce7da
  .quad 0x14be7a8e62892cb4
  .quad 0x25fba24ee7b08275
  .quad 0x669d9bfc3fbbf9ff
  .quad 0xf32e585b001e86ad
  .quad 0x90cde1662ea74d85
  .quad 0x74bc68e6b84a92a7
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0xffffffffffff8000
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x7fff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0x1
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0xffffffffffff8000
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x7fff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0x1
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0xffffffffffff8000
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x7fff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0x1
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0xffffffffffff8000
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x7fff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0x1
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0xffffffffffff8000
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x7fff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0x1
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0xffffffffffff8000
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x7fff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0x1
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0xffffffffffff8000
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x7fff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0x1
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0xffffffffffff8000
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x7fff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0x1
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0xffffffffffff8000
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x7fff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0x1
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0xffffffffffff8000
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x7fff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0x1
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf


RVTEST_DATA_END


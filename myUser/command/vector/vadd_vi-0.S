#
# This file is automatically generated. Do not edit.
# Instruction: vadd.vi

#include "riscv_test.h"
#include "test_macros.h"

RVTEST_RV64UV

.align  6;
.globl vadd_vi_0_start;
vadd_vi_0_start:
# Zero all vector registers
vsetvli t0, x0, e8,m8,tu,mu
vmv.v.i v0, 0x0
vmv.v.i v8, 0x0
vmv.v.i v16, 0x0
vmv.v.i v24, 0x0


# Generating tests for VL: 0, LMUL: mf8, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 0
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 16
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 32
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)

  TEST_CASE(2, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(3, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(4, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(5, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(6, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(7, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(8, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(9, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(10, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(11, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(12, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(13, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(14, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(15, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 7, LMUL: mf8, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 48
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 64
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 80
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(16, t0, 0x30ac75dc32800200, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(17, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(18, t0, 0x30ac75dc32800301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(19, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(20, t0, 0x30ac75dc32800503, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(21, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(22, t0, 0x30ac75dc328001ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(23, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(24, t0, 0x30ac75dc32800301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(25, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(26, t0, 0x30ac75dc32800301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(27, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(28, t0, 0x30ac75dc328001ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(29, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 8, LMUL: mf8, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 96
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 112
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 128
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(30, t0, 0x30ac75dc32800200, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(31, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(32, t0, 0x30ac75dc32800301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(33, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(34, t0, 0x30ac75dc32800503, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(35, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(36, t0, 0x30ac75dc328001ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(37, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(38, t0, 0x30ac75dc32800301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(39, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(40, t0, 0x30ac75dc32800301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(41, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(42, t0, 0x30ac75dc328001ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(43, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 16, LMUL: mf8, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 144
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 160
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 176
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(44, t0, 0x30ac75dc32800200, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(45, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(46, t0, 0x30ac75dc32800301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(47, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(48, t0, 0x30ac75dc32800503, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(49, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(50, t0, 0x30ac75dc328001ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(51, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(52, t0, 0x30ac75dc32800301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(53, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(54, t0, 0x30ac75dc32800301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(55, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(56, t0, 0x30ac75dc328001ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(57, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 15, LMUL: mf8, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 192
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 208
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 224
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(58, t0, 0x30ac75dc32800200, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(59, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(60, t0, 0x30ac75dc32800301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(61, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(62, t0, 0x30ac75dc32800503, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(63, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(64, t0, 0x30ac75dc328001ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(65, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(66, t0, 0x30ac75dc32800301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(67, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(68, t0, 0x30ac75dc32800301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(69, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(70, t0, 0x30ac75dc328001ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(71, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 17, LMUL: mf8, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 240
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 256
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 272
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(72, t0, 0x30ac75dc32800200, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(73, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(74, t0, 0x30ac75dc32800301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(75, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(76, t0, 0x30ac75dc32800503, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(77, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(78, t0, 0x30ac75dc328001ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(79, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(80, t0, 0x30ac75dc32800301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(81, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(82, t0, 0x30ac75dc32800301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(83, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(84, t0, 0x30ac75dc328001ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(85, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 15, LMUL: mf8, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 288
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 304
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 320
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(86, t0, 0x30ac75dc32800200, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(87, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(88, t0, 0x30ac75dc32800301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(89, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(90, t0, 0x30ac75dc32800503, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(91, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(92, t0, 0x30ac75dc328001ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(93, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(94, t0, 0x30ac75dc32800301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(95, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(96, t0, 0x30ac75dc32800301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(97, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(98, t0, 0x30ac75dc328001ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(99, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 9, LMUL: mf8, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 336
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 352
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 368
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 9
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(100, t0, 0x30ac75dc32800200, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(101, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 9
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(102, t0, 0x30ac75dc32800301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(103, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 9
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(104, t0, 0x30ac75dc32800503, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(105, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 9
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(106, t0, 0x30ac75dc328001ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(107, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 9
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(108, t0, 0x30ac75dc32800301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(109, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 9
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(110, t0, 0x30ac75dc32800301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(111, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 9
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(112, t0, 0x30ac75dc328001ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(113, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 13, LMUL: mf8, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 384
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 400
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 416
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 13
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(114, t0, 0x30ac75dc32800200, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(115, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 13
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(116, t0, 0x30ac75dc32800301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(117, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 13
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(118, t0, 0x30ac75dc32800503, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(119, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 13
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(120, t0, 0x30ac75dc328001ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(121, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 13
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(122, t0, 0x30ac75dc32800301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(123, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 13
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(124, t0, 0x30ac75dc32800301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(125, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 13
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(126, t0, 0x30ac75dc328001ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(127, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 0, LMUL: mf8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 432
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 448
add a0, a0, a5

# Load data into v28 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v28, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 464
add a0, a0, a5

# Load data into v23 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v23, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v28, v23, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v28 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v28, (a0)


  TEST_CASE(128, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(129, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v28, v23, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v28 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v28, (a0)


  TEST_CASE(130, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(131, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v28, v23, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v28 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v28, (a0)


  TEST_CASE(132, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(133, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v28, v23, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v28 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v28, (a0)


  TEST_CASE(134, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(135, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v28, v23, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v28 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v28, (a0)


  TEST_CASE(136, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(137, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v28, v23, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v28 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v28, (a0)


  TEST_CASE(138, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(139, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v28, v23, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v28 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v28, (a0)


  TEST_CASE(140, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(141, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 7, LMUL: mf8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 480
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 496
add a0, a0, a5

# Load data into v29 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v29, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 512
add a0, a0, a5

# Load data into v9 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v9, (a0)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v29, v9, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v29 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v29, (a0)


  TEST_CASE(142, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(143, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v29, v9, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v29 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v29, (a0)


  TEST_CASE(144, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(145, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v29, v9, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v29 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v29, (a0)


  TEST_CASE(146, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(147, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v29, v9, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v29 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v29, (a0)


  TEST_CASE(148, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(149, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v29, v9, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v29 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v29, (a0)


  TEST_CASE(150, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(151, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v29, v9, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v29 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v29, (a0)


  TEST_CASE(152, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(153, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v29, v9, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v29 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v29, (a0)


  TEST_CASE(154, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(155, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 8, LMUL: mf8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 528
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 544
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 560
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(156, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(157, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(158, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(159, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(160, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(161, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(162, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(163, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(164, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(165, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(166, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(167, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(168, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(169, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 16, LMUL: mf8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 576
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 592
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 608
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(170, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(171, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(172, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(173, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(174, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(175, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(176, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(177, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(178, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(179, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(180, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(181, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(182, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(183, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 15, LMUL: mf8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 624
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 640
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 656
add a0, a0, a5

# Load data into v15 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v15, (a0)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v11, v15, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v11 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v11, (a0)


  TEST_CASE(184, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(185, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v11, v15, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v11 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v11, (a0)


  TEST_CASE(186, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(187, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v11, v15, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v11 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v11, (a0)


  TEST_CASE(188, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(189, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v11, v15, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v11 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v11, (a0)


  TEST_CASE(190, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(191, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v11, v15, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v11 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v11, (a0)


  TEST_CASE(192, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(193, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v11, v15, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v11 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v11, (a0)


  TEST_CASE(194, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(195, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v11, v15, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v11 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v11, (a0)


  TEST_CASE(196, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(197, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 17, LMUL: mf8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 672
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 688
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 704
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(198, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(199, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(200, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(201, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(202, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(203, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(204, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(205, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(206, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(207, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(208, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(209, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(210, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(211, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 12, LMUL: mf8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 720
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 736
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 752
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(212, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(213, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(214, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(215, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(216, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(217, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(218, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(219, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(220, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(221, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(222, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(223, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(224, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(225, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 11, LMUL: mf8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 768
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 784
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 800
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(226, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(227, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(228, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(229, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(230, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(231, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(232, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(233, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(234, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(235, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(236, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(237, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(238, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(239, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 6, LMUL: mf8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 816
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 832
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 848
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(240, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(241, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(242, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(243, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(244, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(245, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(246, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(247, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(248, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(249, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(250, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(251, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf8,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(252, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(253, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 0, LMUL: mf4, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 864
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 880
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 896
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(254, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(255, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(256, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(257, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(258, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(259, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(260, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(261, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(262, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(263, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(264, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(265, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(266, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(267, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 7, LMUL: mf4, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 912
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 928
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 944
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(268, t0, 0x30ac75dc000f0200, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(269, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(270, t0, 0x30ac75dc01100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(271, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(272, t0, 0x30ac75dc03120503, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(273, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(274, t0, 0x30ac75dcff0e01ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(275, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(276, t0, 0x30ac75dc01100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(277, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(278, t0, 0x30ac75dc01100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(279, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(280, t0, 0x30ac75dcff0e01ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(281, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 8, LMUL: mf4, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 960
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 976
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 992
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(282, t0, 0x30ac75dc000f0200, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(283, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(284, t0, 0x30ac75dc01100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(285, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(286, t0, 0x30ac75dc03120503, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(287, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(288, t0, 0x30ac75dcff0e01ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(289, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(290, t0, 0x30ac75dc01100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(291, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(292, t0, 0x30ac75dc01100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(293, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(294, t0, 0x30ac75dcff0e01ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(295, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 16, LMUL: mf4, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 1008
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1024
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1040
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(296, t0, 0x30ac75dc000f0200, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(297, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(298, t0, 0x30ac75dc01100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(299, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(300, t0, 0x30ac75dc03120503, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(301, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(302, t0, 0x30ac75dcff0e01ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(303, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(304, t0, 0x30ac75dc01100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(305, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(306, t0, 0x30ac75dc01100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(307, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(308, t0, 0x30ac75dcff0e01ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(309, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 15, LMUL: mf4, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 1056
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1072
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1088
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(310, t0, 0x30ac75dc000f0200, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(311, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(312, t0, 0x30ac75dc01100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(313, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(314, t0, 0x30ac75dc03120503, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(315, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(316, t0, 0x30ac75dcff0e01ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(317, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(318, t0, 0x30ac75dc01100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(319, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(320, t0, 0x30ac75dc01100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(321, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(322, t0, 0x30ac75dcff0e01ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(323, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 17, LMUL: mf4, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 1104
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1120
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1136
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(324, t0, 0x30ac75dc000f0200, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(325, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(326, t0, 0x30ac75dc01100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(327, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(328, t0, 0x30ac75dc03120503, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(329, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(330, t0, 0x30ac75dcff0e01ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(331, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(332, t0, 0x30ac75dc01100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(333, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(334, t0, 0x30ac75dc01100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(335, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(336, t0, 0x30ac75dcff0e01ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(337, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 12, LMUL: mf4, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 1152
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1168
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1184
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(338, t0, 0x30ac75dc000f0200, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(339, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(340, t0, 0x30ac75dc01100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(341, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(342, t0, 0x30ac75dc03120503, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(343, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(344, t0, 0x30ac75dcff0e01ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(345, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(346, t0, 0x30ac75dc01100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(347, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(348, t0, 0x30ac75dc01100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(349, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(350, t0, 0x30ac75dcff0e01ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(351, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 11, LMUL: mf4, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 1200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1216
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1232
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(352, t0, 0x30ac75dc000f0200, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(353, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(354, t0, 0x30ac75dc01100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(355, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(356, t0, 0x30ac75dc03120503, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(357, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(358, t0, 0x30ac75dcff0e01ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(359, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(360, t0, 0x30ac75dc01100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(361, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(362, t0, 0x30ac75dc01100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(363, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(364, t0, 0x30ac75dcff0e01ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(365, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 6, LMUL: mf4, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 1248
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1264
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1280
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(366, t0, 0x30ac75dc000f0200, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(367, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(368, t0, 0x30ac75dc01100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(369, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(370, t0, 0x30ac75dc03120503, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(371, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(372, t0, 0x30ac75dcff0e01ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(373, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(374, t0, 0x30ac75dc01100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(375, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(376, t0, 0x30ac75dc01100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(377, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(378, t0, 0x30ac75dcff0e01ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(379, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 0, LMUL: mf4, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 1296
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1312
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1328
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(380, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(381, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(382, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(383, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(384, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(385, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(386, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(387, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(388, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(389, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(390, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(391, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(392, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(393, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 7, LMUL: mf4, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 1344
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1360
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1376
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(394, t0, 0x30ac75dc320f8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(395, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(396, t0, 0x30ac75dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(397, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(398, t0, 0x30ac75dc32128aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(399, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(400, t0, 0x30ac75dc320e8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(401, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(402, t0, 0x30ac75dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(403, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(404, t0, 0x30ac75dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(405, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(406, t0, 0x30ac75dc320e8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(407, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 8, LMUL: mf4, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 1392
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1408
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1424
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(408, t0, 0x30ac75dc320f8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(409, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(410, t0, 0x30ac75dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(411, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(412, t0, 0x30ac75dc32128aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(413, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(414, t0, 0x30ac75dc320e8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(415, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(416, t0, 0x30ac75dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(417, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(418, t0, 0x30ac75dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(419, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(420, t0, 0x30ac75dc320e8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(421, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 16, LMUL: mf4, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 1440
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1456
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1472
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(422, t0, 0x30ac75dc320f8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(423, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(424, t0, 0x30ac75dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(425, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(426, t0, 0x30ac75dc32128aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(427, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(428, t0, 0x30ac75dc320e8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(429, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(430, t0, 0x30ac75dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(431, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(432, t0, 0x30ac75dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(433, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(434, t0, 0x30ac75dc320e8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(435, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 15, LMUL: mf4, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 1488
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1504
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1520
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(436, t0, 0x30ac75dc320f8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(437, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(438, t0, 0x30ac75dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(439, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(440, t0, 0x30ac75dc32128aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(441, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(442, t0, 0x30ac75dc320e8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(443, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(444, t0, 0x30ac75dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(445, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(446, t0, 0x30ac75dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(447, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(448, t0, 0x30ac75dc320e8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(449, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 17, LMUL: mf4, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 1536
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1552
add a0, a0, a5

# Load data into v23 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v23, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1568
add a0, a0, a5

# Load data into v30 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v30, (a0)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v23, v30, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v23 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v23, (a0)


  TEST_CASE(450, t0, 0x30ac75dc320f8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(451, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v23, v30, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v23 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v23, (a0)


  TEST_CASE(452, t0, 0x30ac75dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(453, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v23, v30, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v23 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v23, (a0)


  TEST_CASE(454, t0, 0x30ac75dc32128aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(455, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v23, v30, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v23 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v23, (a0)


  TEST_CASE(456, t0, 0x30ac75dc320e8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(457, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v23, v30, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v23 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v23, (a0)


  TEST_CASE(458, t0, 0x30ac75dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(459, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v23, v30, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v23 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v23, (a0)


  TEST_CASE(460, t0, 0x30ac75dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(461, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v23, v30, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v23 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v23, (a0)


  TEST_CASE(462, t0, 0x30ac75dc320e8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(463, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 12, LMUL: mf4, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 1584
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1600
add a0, a0, a5

# Load data into v2 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v2, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1616
add a0, a0, a5

# Load data into v27 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v27, (a0)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v2, v27, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v2 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v2, (a0)


  TEST_CASE(464, t0, 0x30ac75dc320f8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(465, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v2, v27, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v2 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v2, (a0)


  TEST_CASE(466, t0, 0x30ac75dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(467, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v2, v27, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v2 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v2, (a0)


  TEST_CASE(468, t0, 0x30ac75dc32128aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(469, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v2, v27, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v2 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v2, (a0)


  TEST_CASE(470, t0, 0x30ac75dc320e8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(471, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v2, v27, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v2 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v2, (a0)


  TEST_CASE(472, t0, 0x30ac75dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(473, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v2, v27, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v2 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v2, (a0)


  TEST_CASE(474, t0, 0x30ac75dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(475, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v2, v27, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v2 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v2, (a0)


  TEST_CASE(476, t0, 0x30ac75dc320e8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(477, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 11, LMUL: mf4, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 1632
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1648
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1664
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(478, t0, 0x30ac75dc320f8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(479, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(480, t0, 0x30ac75dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(481, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(482, t0, 0x30ac75dc32128aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(483, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(484, t0, 0x30ac75dc320e8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(485, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(486, t0, 0x30ac75dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(487, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(488, t0, 0x30ac75dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(489, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(490, t0, 0x30ac75dc320e8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(491, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 6, LMUL: mf4, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 1680
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1696
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1712
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(492, t0, 0x30ac75dc320f8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(493, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(494, t0, 0x30ac75dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(495, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(496, t0, 0x30ac75dc32128aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(497, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(498, t0, 0x30ac75dc320e8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(499, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(500, t0, 0x30ac75dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(501, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(502, t0, 0x30ac75dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(503, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf4,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(504, t0, 0x30ac75dc320e8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(505, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 0, LMUL: mf4, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 1728
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1744
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1760
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vle16.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(506, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(507, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(508, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(509, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(510, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(511, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(512, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(513, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(514, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(515, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(516, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(517, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(518, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(519, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 3, LMUL: mf4, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 1776
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1792
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1808
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vle16.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 3
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(520, t0, 0x30ac75dc00020000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(521, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 3
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(522, t0, 0x30ac75dc00030001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(523, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 3
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(524, t0, 0x30ac75dc00050003, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(525, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 3
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(526, t0, 0x30ac75dc0001ffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(527, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 3
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(528, t0, 0x30ac75dc00030001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(529, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 3
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(530, t0, 0x30ac75dc00030001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(531, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 3
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(532, t0, 0x30ac75dc0001ffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(533, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 4, LMUL: mf4, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 1824
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1840
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1856
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vle16.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(534, t0, 0x30ac75dc00020000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(535, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(536, t0, 0x30ac75dc00030001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(537, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(538, t0, 0x30ac75dc00050003, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(539, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(540, t0, 0x30ac75dc0001ffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(541, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(542, t0, 0x30ac75dc00030001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(543, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(544, t0, 0x30ac75dc00030001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(545, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(546, t0, 0x30ac75dc0001ffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(547, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 8, LMUL: mf4, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 1872
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1888
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1904
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vle16.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(548, t0, 0x30ac75dc00020000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(549, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(550, t0, 0x30ac75dc00030001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(551, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(552, t0, 0x30ac75dc00050003, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(553, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(554, t0, 0x30ac75dc0001ffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(555, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(556, t0, 0x30ac75dc00030001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(557, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(558, t0, 0x30ac75dc00030001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(559, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(560, t0, 0x30ac75dc0001ffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(561, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 7, LMUL: mf4, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 1920
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1936
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1952
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vle16.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(562, t0, 0x30ac75dc00020000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(563, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(564, t0, 0x30ac75dc00030001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(565, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(566, t0, 0x30ac75dc00050003, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(567, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(568, t0, 0x30ac75dc0001ffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(569, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(570, t0, 0x30ac75dc00030001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(571, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(572, t0, 0x30ac75dc00030001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(573, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(574, t0, 0x30ac75dc0001ffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(575, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 9, LMUL: mf4, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 1968
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1984
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2000
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vle16.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 9
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(576, t0, 0x30ac75dc00020000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(577, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 9
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(578, t0, 0x30ac75dc00030001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(579, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 9
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(580, t0, 0x30ac75dc00050003, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(581, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 9
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(582, t0, 0x30ac75dc0001ffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(583, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 9
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(584, t0, 0x30ac75dc00030001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(585, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 9
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(586, t0, 0x30ac75dc00030001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(587, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 9
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(588, t0, 0x30ac75dc0001ffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(589, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 0, LMUL: mf4, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 2016
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2032
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2048
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vle16.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(590, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(591, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(592, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(593, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(594, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(595, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(596, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(597, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(598, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(599, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(600, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(601, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(602, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(603, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 4, LMUL: mf4, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 2064
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2080
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2096
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vle16.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(604, t0, 0x30ac75dc00020000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(605, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(606, t0, 0x30ac75dc00030001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(607, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(608, t0, 0x30ac75dc00050003, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(609, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(610, t0, 0x30ac75dc0001ffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(611, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(612, t0, 0x30ac75dc00030001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(613, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(614, t0, 0x30ac75dc00030001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(615, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(616, t0, 0x30ac75dc0001ffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(617, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 1, LMUL: mf4, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 2112
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2128
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2144
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vle16.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 1
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(618, t0, 0x30ac75dc32800000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(619, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 1
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(620, t0, 0x30ac75dc32800001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(621, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 1
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(622, t0, 0x30ac75dc32800003, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(623, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 1
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(624, t0, 0x30ac75dc3280ffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(625, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 1
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(626, t0, 0x30ac75dc32800001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(627, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 1
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(628, t0, 0x30ac75dc32800001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(629, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 1
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(630, t0, 0x30ac75dc3280ffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(631, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 0, LMUL: mf4, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 2160
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2176
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2192
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vle16.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(632, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(633, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(634, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(635, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(636, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(637, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(638, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(639, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(640, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(641, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(642, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(643, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(644, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(645, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 3, LMUL: mf4, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 2208
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2224
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2240
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vle16.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 3
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(646, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(647, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 3
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(648, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(649, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 3
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(650, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(651, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 3
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(652, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(653, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 3
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(654, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(655, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 3
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(656, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(657, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 3
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(658, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(659, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 4, LMUL: mf4, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 2256
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2272
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2288
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vle16.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(660, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(661, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(662, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(663, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(664, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(665, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(666, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(667, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(668, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(669, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(670, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(671, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(672, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(673, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 8, LMUL: mf4, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 2304
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2320
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2336
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vle16.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(674, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(675, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(676, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(677, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(678, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(679, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(680, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(681, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(682, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(683, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(684, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(685, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(686, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(687, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 7, LMUL: mf4, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 2352
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2368
add a0, a0, a5

# Load data into v13 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v13, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2384
add a0, a0, a5

# Load data into v27 register group.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vle16.v v27, (a0)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v13, v27, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v13 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v13, (a0)


  TEST_CASE(688, t0, 0xa42655d9b621587c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(689, t0, 0x8b7c4e0b6804951a, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v13, v27, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v13 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v13, (a0)


  TEST_CASE(690, t0, 0xa42655d9b621587c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(691, t0, 0x8b7c4e0b6804951a, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v13, v27, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v13 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v13, (a0)


  TEST_CASE(692, t0, 0xa42655d9b621587c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(693, t0, 0x8b7c4e0b6804951a, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v13, v27, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v13 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v13, (a0)


  TEST_CASE(694, t0, 0xa42655d9b621587c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(695, t0, 0x8b7c4e0b6804951a, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v13, v27, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v13 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v13, (a0)


  TEST_CASE(696, t0, 0xa42655d9b621587c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(697, t0, 0x8b7c4e0b6804951a, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v13, v27, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v13 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v13, (a0)


  TEST_CASE(698, t0, 0xa42655d9b621587c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(699, t0, 0x8b7c4e0b6804951a, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v13, v27, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v13 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v13, (a0)


  TEST_CASE(700, t0, 0xa42655d9b621587c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(701, t0, 0x8b7c4e0b6804951a, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 9, LMUL: mf4, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 2400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2416
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2432
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vle16.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 9
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(702, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(703, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 9
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(704, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(705, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 9
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(706, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(707, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 9
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(708, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(709, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 9
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(710, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(711, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 9
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(712, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(713, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 9
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(714, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(715, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 0, LMUL: mf4, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 2448
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2464
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2480
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vle16.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(716, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(717, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(718, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(719, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(720, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(721, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(722, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(723, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(724, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(725, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(726, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(727, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(728, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(729, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 4, LMUL: mf4, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 2496
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2512
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2528
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vle16.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(730, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(731, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(732, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(733, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(734, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(735, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(736, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(737, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(738, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(739, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(740, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(741, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(742, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(743, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 1, LMUL: mf4, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 2544
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2560
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2576
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vle16.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 1
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(744, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(745, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 1
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(746, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(747, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 1
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(748, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(749, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 1
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(750, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(751, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 1
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(752, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(753, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 1
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(754, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(755, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 1
vsetvli t1, t0, e16,mf4,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(756, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(757, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 0, LMUL: mf2, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 2592
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2608
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2624
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(758, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(759, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(760, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(761, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(762, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(763, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(764, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(765, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(766, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(767, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(768, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(769, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(770, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(771, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 7, LMUL: mf2, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 2640
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2656
add a0, a0, a5

# Load data into v3 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v3, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2672
add a0, a0, a5

# Load data into v22 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v22, (a0)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v3, v22, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v3 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v3, (a0)


  TEST_CASE(772, t0, 0x30ff7fff000f0200, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(773, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v3, v22, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v3 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v3, (a0)


  TEST_CASE(774, t0, 0x3000800001100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(775, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v3, v22, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v3 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v3, (a0)


  TEST_CASE(776, t0, 0x3002820203120503, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(777, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v3, v22, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v3 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v3, (a0)


  TEST_CASE(778, t0, 0x30fe7efeff0e01ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(779, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v3, v22, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v3 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v3, (a0)


  TEST_CASE(780, t0, 0x3000800001100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(781, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v3, v22, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v3 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v3, (a0)


  TEST_CASE(782, t0, 0x3000800001100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(783, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v3, v22, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v3 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v3, (a0)


  TEST_CASE(784, t0, 0x30fe7efeff0e01ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(785, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 8, LMUL: mf2, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 2688
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2704
add a0, a0, a5

# Load data into v13 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v13, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2720
add a0, a0, a5

# Load data into v21 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v21, (a0)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v13, v21, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v13 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v13, (a0)


  TEST_CASE(786, t0, 0xff7fff000f0200, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(787, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v13, v21, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v13 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v13, (a0)


  TEST_CASE(788, t0, 0x100800001100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(789, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v13, v21, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v13 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v13, (a0)


  TEST_CASE(790, t0, 0x302820203120503, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(791, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v13, v21, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v13 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v13, (a0)


  TEST_CASE(792, t0, 0xfffe7efeff0e01ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(793, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v13, v21, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v13 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v13, (a0)


  TEST_CASE(794, t0, 0x100800001100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(795, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v13, v21, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v13 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v13, (a0)


  TEST_CASE(796, t0, 0x100800001100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(797, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v13, v21, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v13 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v13, (a0)


  TEST_CASE(798, t0, 0xfffe7efeff0e01ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(799, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 16, LMUL: mf2, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 2736
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2752
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2768
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(800, t0, 0xff7fff000f0200, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(801, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(802, t0, 0x100800001100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(803, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(804, t0, 0x302820203120503, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(805, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(806, t0, 0xfffe7efeff0e01ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(807, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(808, t0, 0x100800001100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(809, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(810, t0, 0x100800001100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(811, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(812, t0, 0xfffe7efeff0e01ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(813, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 15, LMUL: mf2, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 2784
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2800
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2816
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(814, t0, 0xff7fff000f0200, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(815, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(816, t0, 0x100800001100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(817, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(818, t0, 0x302820203120503, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(819, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(820, t0, 0xfffe7efeff0e01ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(821, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(822, t0, 0x100800001100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(823, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(824, t0, 0x100800001100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(825, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(826, t0, 0xfffe7efeff0e01ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(827, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 17, LMUL: mf2, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 2832
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2848
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2864
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(828, t0, 0xff7fff000f0200, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(829, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(830, t0, 0x100800001100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(831, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(832, t0, 0x302820203120503, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(833, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(834, t0, 0xfffe7efeff0e01ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(835, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(836, t0, 0x100800001100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(837, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(838, t0, 0x100800001100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(839, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(840, t0, 0xfffe7efeff0e01ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(841, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 12, LMUL: mf2, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 2880
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2896
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2912
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(842, t0, 0xff7fff000f0200, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(843, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(844, t0, 0x100800001100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(845, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(846, t0, 0x302820203120503, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(847, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(848, t0, 0xfffe7efeff0e01ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(849, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(850, t0, 0x100800001100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(851, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(852, t0, 0x100800001100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(853, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(854, t0, 0xfffe7efeff0e01ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(855, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 11, LMUL: mf2, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 2928
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2944
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2960
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(856, t0, 0xff7fff000f0200, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(857, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(858, t0, 0x100800001100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(859, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(860, t0, 0x302820203120503, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(861, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(862, t0, 0xfffe7efeff0e01ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(863, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(864, t0, 0x100800001100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(865, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(866, t0, 0x100800001100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(867, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(868, t0, 0xfffe7efeff0e01ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(869, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 6, LMUL: mf2, SEW: e8, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 2976
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2992
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3008
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(870, t0, 0x30ac7fff000f0200, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(871, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(872, t0, 0x30ac800001100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(873, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(874, t0, 0x30ac820203120503, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(875, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(876, t0, 0x30ac7efeff0e01ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(877, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(878, t0, 0x30ac800001100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(879, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(880, t0, 0x30ac800001100301, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(881, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(882, t0, 0x30ac7efeff0e01ff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(883, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 0, LMUL: mf2, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 3024
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3040
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3056
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(884, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(885, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(886, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(887, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(888, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(889, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(890, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(891, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(892, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(893, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(894, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(895, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(896, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(897, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 7, LMUL: mf2, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 3072
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3088
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3104
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(898, t0, 0x30ac7fdc320f8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(899, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(900, t0, 0x30ac80dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(901, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(902, t0, 0x30ac82dc32128aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(903, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(904, t0, 0x30ac7edc320e8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(905, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(906, t0, 0x30ac80dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(907, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(908, t0, 0x30ac80dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(909, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(910, t0, 0x30ac7edc320e8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(911, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 8, LMUL: mf2, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 3120
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3136
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3152
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(912, t0, 0xac7fdc320f8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(913, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(914, t0, 0x1ac80dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(915, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(916, t0, 0x3ac82dc32128aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(917, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(918, t0, 0xffac7edc320e8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(919, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(920, t0, 0x1ac80dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(921, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(922, t0, 0x1ac80dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(923, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(924, t0, 0xffac7edc320e8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(925, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 16, LMUL: mf2, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 3168
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3184
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3200
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(926, t0, 0xac7fdc320f8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(927, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(928, t0, 0x1ac80dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(929, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(930, t0, 0x3ac82dc32128aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(931, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(932, t0, 0xffac7edc320e8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(933, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(934, t0, 0x1ac80dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(935, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(936, t0, 0x1ac80dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(937, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(938, t0, 0xffac7edc320e8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(939, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 15, LMUL: mf2, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 3216
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3232
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3248
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(940, t0, 0xac7fdc320f8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(941, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(942, t0, 0x1ac80dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(943, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(944, t0, 0x3ac82dc32128aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(945, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(946, t0, 0xffac7edc320e8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(947, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(948, t0, 0x1ac80dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(949, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(950, t0, 0x1ac80dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(951, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(952, t0, 0xffac7edc320e8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(953, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 17, LMUL: mf2, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 3264
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3280
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3296
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(954, t0, 0xac7fdc320f8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(955, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(956, t0, 0x1ac80dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(957, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(958, t0, 0x3ac82dc32128aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(959, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(960, t0, 0xffac7edc320e8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(961, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(962, t0, 0x1ac80dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(963, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(964, t0, 0x1ac80dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(965, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 17
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(966, t0, 0xffac7edc320e8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(967, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 12, LMUL: mf2, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 3312
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3328
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3344
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(968, t0, 0xac7fdc320f8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(969, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(970, t0, 0x1ac80dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(971, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(972, t0, 0x3ac82dc32128aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(973, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(974, t0, 0xffac7edc320e8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(975, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(976, t0, 0x1ac80dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(977, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(978, t0, 0x1ac80dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(979, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 12
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(980, t0, 0xffac7edc320e8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(981, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 11, LMUL: mf2, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 3360
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3376
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3392
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(982, t0, 0xac7fdc320f8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(983, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(984, t0, 0x1ac80dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(985, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(986, t0, 0x3ac82dc32128aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(987, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(988, t0, 0xffac7edc320e8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(989, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(990, t0, 0x1ac80dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(991, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(992, t0, 0x1ac80dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(993, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 11
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(994, t0, 0xffac7edc320e8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(995, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 6, LMUL: mf2, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 3408
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3424
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3440
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 0, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(996, t0, 0x30ac7fdc320f8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(997, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(998, t0, 0x30ac80dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(999, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 3, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(1000, t0, 0x30ac82dc32128aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1001, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(1002, t0, 0x30ac7edc320e8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1003, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(1004, t0, 0x30ac80dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1005, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, 1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(1006, t0, 0x30ac80dc32108aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1007, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 6
vsetvli t1, t0, e8,mf2,tu,mu
vadd.vi v12, v11, -1, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vse8.v v12, (a0)


  TEST_CASE(1008, t0, 0x30ac7edc320e8aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1009, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 0, LMUL: mf2, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 3456
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3472
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3488
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vle16.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1010, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1011, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1012, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1013, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1014, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1015, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1016, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1017, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1018, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1019, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1020, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1021, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1022, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1023, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 3, LMUL: mf2, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 3504
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3520
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3536
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vle16.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 3
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1024, t0, 0x30ac000f00020000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1025, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 3
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1026, t0, 0x30ac001000030001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1027, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 3
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1028, t0, 0x30ac001200050003, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1029, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 3
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1030, t0, 0x30ac000e0001ffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1031, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 3
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1032, t0, 0x30ac001000030001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1033, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 3
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1034, t0, 0x30ac001000030001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1035, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 3
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1036, t0, 0x30ac000e0001ffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1037, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 4, LMUL: mf2, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 3552
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3568
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3584
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vle16.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1038, t0, 0xf00020000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1039, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1040, t0, 0x1001000030001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1041, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1042, t0, 0x3001200050003, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1043, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1044, t0, 0xffff000e0001ffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1045, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1046, t0, 0x1001000030001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1047, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1048, t0, 0x1001000030001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1049, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 4
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1050, t0, 0xffff000e0001ffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1051, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 8, LMUL: mf2, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 3600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3616
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3632
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vle16.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1052, t0, 0xf00020000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1053, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1054, t0, 0x1001000030001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1055, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1056, t0, 0x3001200050003, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1057, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1058, t0, 0xffff000e0001ffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1059, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1060, t0, 0x1001000030001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1061, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1062, t0, 0x1001000030001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1063, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1064, t0, 0xffff000e0001ffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1065, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 7, LMUL: mf2, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 3648
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3664
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3680
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vle16.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1066, t0, 0xf00020000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1067, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1068, t0, 0x1001000030001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1069, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1070, t0, 0x3001200050003, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1071, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1072, t0, 0xffff000e0001ffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1073, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1074, t0, 0x1001000030001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1075, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1076, t0, 0x1001000030001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1077, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1078, t0, 0xffff000e0001ffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1079, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 9, LMUL: mf2, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 3696
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3712
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3728
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vle16.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 9
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1080, t0, 0xf00020000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1081, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 9
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1082, t0, 0x1001000030001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1083, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 9
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1084, t0, 0x3001200050003, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1085, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 9
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1086, t0, 0xffff000e0001ffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1087, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 9
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1088, t0, 0x1001000030001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1089, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 9
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1090, t0, 0x1001000030001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1091, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 9
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1092, t0, 0xffff000e0001ffff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1093, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 0, LMUL: mf2, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 3744
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3760
add a0, a0, a5

# Load data into v12 register group.
li t0, -1
vsetvli t1, t0, e8,m1,tu,mu
vle8.v v12, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3776
add a0, a0, a5

# Load data into v11 register group.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vle16.v v11, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 0
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1094, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1095, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1096, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1097, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 3
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1098, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1099, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1100, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1101, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1102, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1103, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, 1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1104, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1105, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,mf2,tu,mu
vadd.vi v12, v11, -1
# -------------- TEST END   --------------
la a0, resultdata

# Store v12 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m1,tu,mu
vse16.v v12, (a0)


  TEST_CASE(1106, t0, 0x30ac75dc32808aa4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1107, t0, 0x8344c0aa5b761295, ld t0, 0(a0); addi a0, a0, 8)



  TEST_PASSFAIL
RVTEST_CODE_END

  .data
RVTEST_DATA_BEGIN

# Reserve space for test data.
resultdata:
  .zero 128

testdata:
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xb110a63d3b02b3a5
  .quad 0x614ef8ba9c793e38
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x9315af5edc967cf0
  .quad 0xcc0b8698a654b132
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xaf5a9e4f706026b8
  .quad 0x8698a654b1329315
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x9563cac0066528c7
  .quad 0x67aeb3e48450a43
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xa42655d9b621587c
  .quad 0x8b7c4e0b6804951a
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0xb8a82baceaaad186
  .quad 0x5b85dfaaccc5b212
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x4f65822107fcfd52
  .quad 0x721d629a0f5f3f16
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xd05791213c2a57f2
  .quad 0xcf743b7019083b43
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x5150b8228fc5c6a3
  .quad 0xd40947cd3b177d11
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x6026b85edc967cf0
  .quad 0x329315af5a9e4f70
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xfc233869fa4c0c93
  .quad 0x86e3130845d6f39f
  .quad 0x6026b85edc967cf0
  .quad 0x329315af5a9e4f70
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x940b53b3c14347ba
  .quad 0x91c36e8eaddbb865
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x0
  .quad 0x2
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xc4471a05aa336841
  .quad 0xe04f4e1de7449153
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xfa4c0c5a9e4f7060
  .quad 0x45d6f39ffc233869
  .quad 0xee4bd10e86e31308
  .quad 0xd4754e41b4b36d08
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0xde6fbaa4ff243382
  .quad 0x500e72b602a09121
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x320b070de1fd1d44
  .quad 0x6a216b530682ec61
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x6026b85edc967cf0
  .quad 0x329315af5a9e4f70
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xb1b3d462ad678ccc
  .quad 0x5f03517aa30230ee
  .quad 0x7dcf27ed2365efac
  .quad 0xa6750f800ba3527
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x9ac4b6a1f30d3b85
  .quad 0x7e99a600918fa037
  .quad 0x962fc8788dc7048a
  .quad 0x5abb446a7e8518e7
  .quad 0x5d70c6e94531c1e7
  .quad 0xd8e3e0bf30d42410
  .quad 0x81a08d0cc01b1ce1
  .quad 0xb91996a0faa13dd0
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0xcae96af82c0f907c
  .quad 0xce086b53122010ce
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x4f9ea3a02d837950
  .quad 0xa60f3c63fcfdd61c
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x2b59406da3bfe54f
  .quad 0x4e995d854b9b44e6
  .quad 0x50a2f576324d22bc
  .quad 0x4b6ed6e8ab7338c6
  .quad 0x1f5f83d622e6f894
  .quad 0x3b46ac6d12f8d582
  .quad 0xb47498c6a8a3a4c6
  .quad 0x32c0900dc3149ae4
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0xb2f12ce6ef8d0002
  .quad 0x3845b9c9c1281aca
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xc4471a05aa336841
  .quad 0xe04f4e1de7449153
  .quad 0xc9a4071dc384faa5
  .quad 0x8639daff0f0a714f
  .quad 0xbcedeea38defa9d3
  .quad 0xaa7440b4bd2a04d9
  .quad 0x223f5870d8d25f17
  .quad 0x1ec7e3165c741bf4
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0x80036e48e6b22323
  .quad 0x585871237152a723
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x6026b85edc967cf0
  .quad 0x329315af5a9e4f70
  .quad 0x37cc0b8698a654b1
  .quad 0x81c41e68b9e41a25
  .quad 0xfc233869fa4c0c93
  .quad 0x86e3130845d6f39f
  .quad 0xb4b36d08ee4bd10e
  .quad 0x4e47b55bd4754e41
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x566a421b895f7f2b
  .quad 0xacf89a69193a90b9
  .quad 0xb2f12ce6ef8d0002
  .quad 0x3845b9c9c1281aca
  .quad 0x8639540a3379097d
  .quad 0x3ff9d0dee8bb1863
  .quad 0x1ca3e37d6b1aa25b
  .quad 0xd2495b521d1ab17a
  .quad 0x152da219dd399ac1
  .quad 0x8e9c4eb00bcf2eb6
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x7f7888138bbacc69
  .quad 0xcf991067d611b702
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0xc723999cb8387224
  .quad 0x71de11cf8d8a0a23
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xaa9b93ed2365efac
  .quad 0x514931fb98a9c498
  .quad 0x32ddc968434e95f9
  .quad 0x1b5c46399b3c0773
  .quad 0x90c98b7e784c1b96
  .quad 0xd2f6a237b681de83
  .quad 0x34fc41a3411a07b3
  .quad 0x90070598d1e672b3
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x4caa98378257619c
  .quad 0x456091ce64a9701b
  .quad 0xc59f38c9991964f3
  .quad 0xb9ebbdaca012c06
  .quad 0x9efd115df05f7f2b
  .quad 0x15500b3b39600a9a
  .quad 0x90b9566a421b89f5
  .quad 0xd6eacf89a69193a
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0xf0200ff7fff000f
  .quad 0xf0200ff7fff00
  .quad 0xff000f0200ff7fff
  .quad 0x7fff000f0200ff7f
  .quad 0xff7fff000f0200ff
  .quad 0xff7fff000f0200
  .quad 0x200ff7fff000f02
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x44c0aa5b76129530
  .quad 0x26b85edc967cf083
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0xffff0000000f0002
  .quad 0x20000ffff7fff
  .quad 0x7fffffff0000000f
  .quad 0xf00020000ffff
  .quad 0xffff7fffffff0000
  .quad 0xf00020000
  .quad 0xffff7fffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x7fffffffffffffff
  .quad 0xffffffff
  .quad 0xf00000002
  .quad 0xffffffff00000000
  .quad 0xffffffff7fffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x6e48e6b223fa7908
  .quad 0x71237152a7238003
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0x7fffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2


RVTEST_DATA_END


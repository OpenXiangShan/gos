#
# This file is automatically generated. Do not edit.
# Instruction: vasubu.vv

#include "riscv_test.h"
#include "test_macros.h"

RVTEST_RV64UV

.align  6;
.globl vasubu_vv_8_start;
vasubu_vv_8_start:
# Zero all vector registers
vsetvli t0, x0, e8,m8,tu,mu
vmv.v.i v0, 0x0
vmv.v.i v8, 0x0
vmv.v.i v16, 0x0
vmv.v.i v24, 0x0


# Generating tests for VL: 129, LMUL: m8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 0
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 16
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 144
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 272
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 129
vsetvli t1, t0, e8,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v8, (a0)

  TEST_CASE(2, t0, 0x40d688cbdd06bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(3, t0, 0x81dccbfa80ffc131, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(4, t0, 0x4040fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(5, t0, 0x81337f81228fc1c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(6, t0, 0x40c1517c8406a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(7, t0, 0xe3007f8147813bc4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(8, t0, 0x40ce88af84063124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(9, t0, 0xf5047f81efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(10, t0, 0x406c357ccc065500, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(11, t0, 0xdc6de5814dacc12d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(12, t0, 0xeac1887c9c060134, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(13, t0, 0xb7009e8180f6c1c4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(14, t0, 0x40fb880084ea0172, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(15, t0, 0x81005c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(16, t0, 0xe7c1c12c7f06087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(17, t0, 0x81b424c20332c1c4, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 129, LMUL: m8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 129
vsetvli t1, t0, e8,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v8, (a0)


  TEST_CASE(18, t0, 0x40d688cbdd06bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(19, t0, 0x80dccbfa80ffc131, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(20, t0, 0x4040fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(21, t0, 0x81337f81228fc1c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(22, t0, 0x40c0517c8406a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(23, t0, 0xe3007f8147803bc4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(24, t0, 0x40ce88af84063124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(25, t0, 0xf5047f81efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(26, t0, 0x406c357ccc065500, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(27, t0, 0xdc6de5814dacc12d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(28, t0, 0xeac0887c9c060034, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(29, t0, 0xb7009e8180f6c1c4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(30, t0, 0x40fb880084ea0072, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(31, t0, 0x80005c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(32, t0, 0xe7c0c12c7f06087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(33, t0, 0x80b424c20332c1c4, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 129, LMUL: m8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 816
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 944
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1072
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 129
vsetvli t1, t0, e8,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v8, (a0)


  TEST_CASE(34, t0, 0x3fd688cbdd06bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(35, t0, 0x80dccbfa7fffc131, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(36, t0, 0x3f40fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(37, t0, 0x81337f81228fc1c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(38, t0, 0x3fc0517c8406a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(39, t0, 0xe3007f8147803bc4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(40, t0, 0x3fce88af84063124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(41, t0, 0xf5047f81efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(42, t0, 0x3f6c357ccc065500, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(43, t0, 0xdc6de5814dacc12d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(44, t0, 0xeac0887c9c060034, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(45, t0, 0xb7009e817ff6c1c4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(46, t0, 0x3ffb880084ea0072, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(47, t0, 0x80005c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(48, t0, 0xe7c0c12c7f06087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(49, t0, 0x80b424c20332c1c4, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 129, LMUL: m8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 1200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 129
vsetvli t1, t0, e8,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v8, (a0)


  TEST_CASE(50, t0, 0x3fd688cbdd06bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(51, t0, 0x81dccbfa7fffc131, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(52, t0, 0x3f40fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(53, t0, 0x81337f81228fc1c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(54, t0, 0x3fc1517c8406a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(55, t0, 0xe3007f8147813bc4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(56, t0, 0x3fce88af84063124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(57, t0, 0xf5047f81efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(58, t0, 0x3f6c357ccc065500, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(59, t0, 0xdc6de5814dacc12d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(60, t0, 0xeac1887c9c060134, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(61, t0, 0xb7009e817ff6c1c4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(62, t0, 0x3ffb880084ea0172, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(63, t0, 0x81005c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(64, t0, 0xe7c1c12c7f06087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(65, t0, 0x81b424c20332c1c4, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 75, LMUL: m8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 1600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 1872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 75
vsetvli t1, t0, e8,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v8, (a0)


  TEST_CASE(66, t0, 0x40d688cbdd06bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(67, t0, 0x81dccbfa80ffc131, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(68, t0, 0x4040fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(69, t0, 0x81337f81228fc1c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(70, t0, 0x40c1517c8406a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(71, t0, 0xe3007f8147813bc4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(72, t0, 0x40ce88af84063124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(73, t0, 0xf5047f81efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(74, t0, 0x406c357ccc065500, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(75, t0, 0xdc6de5fa4dacc12d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(76, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(77, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(78, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(79, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(80, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(81, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 75, LMUL: m8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 2000
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2016
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2144
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2272
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 75
vsetvli t1, t0, e8,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v8, (a0)


  TEST_CASE(82, t0, 0x40d688cbdd06bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(83, t0, 0x80dccbfa80ffc131, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(84, t0, 0x4040fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(85, t0, 0x81337f81228fc1c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(86, t0, 0x40c0517c8406a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(87, t0, 0xe3007f8147803bc4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(88, t0, 0x40ce88af84063124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(89, t0, 0xf5047f81efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(90, t0, 0x406c357ccc065500, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(91, t0, 0xdc6de5fa4dacc12d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(92, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(93, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(94, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(95, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(96, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(97, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 75, LMUL: m8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 2400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 75
vsetvli t1, t0, e8,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v8, (a0)


  TEST_CASE(98, t0, 0x3fd688cbdd06bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(99, t0, 0x80dccbfa7fffc131, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(100, t0, 0x3f40fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(101, t0, 0x81337f81228fc1c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(102, t0, 0x3fc0517c8406a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(103, t0, 0xe3007f8147803bc4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(104, t0, 0x3fce88af84063124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(105, t0, 0xf5047f81efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(106, t0, 0x3f6c357ccc065500, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(107, t0, 0xdc6de5fa4dacc12d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(108, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(109, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(110, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(111, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(112, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(113, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 75, LMUL: m8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 2800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2816
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 2944
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3072
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 75
vsetvli t1, t0, e8,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v8, (a0)


  TEST_CASE(114, t0, 0x3fd688cbdd06bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(115, t0, 0x81dccbfa7fffc131, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(116, t0, 0x3f40fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(117, t0, 0x81337f81228fc1c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(118, t0, 0x3fc1517c8406a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(119, t0, 0xe3007f8147813bc4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(120, t0, 0x3fce88af84063124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(121, t0, 0xf5047f81efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(122, t0, 0x3f6c357ccc065500, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(123, t0, 0xdc6de5fa4dacc12d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(124, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(125, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(126, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(127, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(128, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(129, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 93, LMUL: m8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 3200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 93
vsetvli t1, t0, e8,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v8, (a0)


  TEST_CASE(130, t0, 0x40d688cbdd06bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(131, t0, 0x81dccbfa80ffc131, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(132, t0, 0x4040fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(133, t0, 0x81337f81228fc1c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(134, t0, 0x40c1517c8406a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(135, t0, 0xe3007f8147813bc4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(136, t0, 0x40ce88af84063124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(137, t0, 0xf5047f81efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(138, t0, 0x406c357ccc065500, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(139, t0, 0xdc6de5814dacc12d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(140, t0, 0xeac1887c9c060134, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(141, t0, 0xb7fb9e8180f6c1c4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(142, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(143, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(144, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(145, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 93, LMUL: m8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 3600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 3872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 93
vsetvli t1, t0, e8,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v8, (a0)


  TEST_CASE(146, t0, 0x40d688cbdd06bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(147, t0, 0x80dccbfa80ffc131, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(148, t0, 0x4040fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(149, t0, 0x81337f81228fc1c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(150, t0, 0x40c0517c8406a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(151, t0, 0xe3007f8147803bc4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(152, t0, 0x40ce88af84063124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(153, t0, 0xf5047f81efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(154, t0, 0x406c357ccc065500, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(155, t0, 0xdc6de5814dacc12d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(156, t0, 0xeac0887c9c060034, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(157, t0, 0xb7fb9e8180f6c1c4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(158, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(159, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(160, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(161, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 93, LMUL: m8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 4000
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 4016
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 4144
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 4272
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 93
vsetvli t1, t0, e8,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v8, (a0)


  TEST_CASE(162, t0, 0x3fd688cbdd06bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(163, t0, 0x80dccbfa7fffc131, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(164, t0, 0x3f40fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(165, t0, 0x81337f81228fc1c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(166, t0, 0x3fc0517c8406a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(167, t0, 0xe3007f8147803bc4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(168, t0, 0x3fce88af84063124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(169, t0, 0xf5047f81efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(170, t0, 0x3f6c357ccc065500, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(171, t0, 0xdc6de5814dacc12d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(172, t0, 0xeac0887c9c060034, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(173, t0, 0xb7fb9e817ff6c1c4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(174, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(175, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(176, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(177, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 93, LMUL: m8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 4400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 4416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 4544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 4672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 93
vsetvli t1, t0, e8,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v8, (a0)


  TEST_CASE(178, t0, 0x3fd688cbdd06bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(179, t0, 0x81dccbfa7fffc131, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(180, t0, 0x3f40fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(181, t0, 0x81337f81228fc1c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(182, t0, 0x3fc1517c8406a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(183, t0, 0xe3007f8147813bc4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(184, t0, 0x3fce88af84063124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(185, t0, 0xf5047f81efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(186, t0, 0x3f6c357ccc065500, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(187, t0, 0xdc6de5814dacc12d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(188, t0, 0xeac1887c9c060134, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(189, t0, 0xb7fb9e817ff6c1c4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(190, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(191, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(192, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(193, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 56, LMUL: m8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 4800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 4816
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 4944
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 5072
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 56
vsetvli t1, t0, e8,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v8, (a0)


  TEST_CASE(194, t0, 0x40d688cbdd06bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(195, t0, 0x81dccbfa80ffc131, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(196, t0, 0x4040fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(197, t0, 0x81337f81228fc1c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(198, t0, 0x40c1517c8406a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(199, t0, 0xe3007f8147813bc4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(200, t0, 0x40ce88af84063124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(201, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(202, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(203, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(204, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(205, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(206, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(207, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(208, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(209, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 56, LMUL: m8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 5200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 5216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 5344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 5472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 56
vsetvli t1, t0, e8,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v8, (a0)


  TEST_CASE(210, t0, 0x40d688cbdd06bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(211, t0, 0x80dccbfa80ffc131, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(212, t0, 0x4040fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(213, t0, 0x81337f81228fc1c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(214, t0, 0x40c0517c8406a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(215, t0, 0xe3007f8147803bc4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(216, t0, 0x40ce88af84063124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(217, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(218, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(219, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(220, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(221, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(222, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(223, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(224, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(225, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 56, LMUL: m8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 5600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 5616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 5744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 5872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 56
vsetvli t1, t0, e8,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v8, (a0)


  TEST_CASE(226, t0, 0x3fd688cbdd06bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(227, t0, 0x80dccbfa7fffc131, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(228, t0, 0x3f40fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(229, t0, 0x81337f81228fc1c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(230, t0, 0x3fc0517c8406a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(231, t0, 0xe3007f8147803bc4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(232, t0, 0x3fce88af84063124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(233, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(234, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(235, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(236, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(237, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(238, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(239, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(240, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(241, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 56, LMUL: m8, SEW: e8, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 6000
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 6016
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 6144
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 6272
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 56
vsetvli t1, t0, e8,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vse8.v v8, (a0)


  TEST_CASE(242, t0, 0x3fd688cbdd06bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(243, t0, 0x81dccbfa7fffc131, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(244, t0, 0x3f40fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(245, t0, 0x81337f81228fc1c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(246, t0, 0x3fc1517c8406a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(247, t0, 0xe3007f8147813bc4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(248, t0, 0x3fce88af84063124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(249, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(250, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(251, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(252, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(253, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(254, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(255, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(256, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(257, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 0, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 6400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 6416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 6544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 6672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(258, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(259, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(260, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(261, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(262, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(263, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(264, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(265, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(266, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(267, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(268, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(269, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(270, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(271, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(272, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(273, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 0, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 6800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 6816
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 6944
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 7072
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(274, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(275, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(276, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(277, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(278, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(279, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(280, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(281, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(282, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(283, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(284, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(285, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(286, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(287, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(288, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(289, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 0, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 7200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 7216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 7344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 7472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(290, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(291, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(292, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(293, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(294, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(295, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(296, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(297, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(298, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(299, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(300, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(301, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(302, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(303, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(304, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(305, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 0, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 7600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 7616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 7744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 7872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(306, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(307, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(308, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(309, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(310, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(311, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(312, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(313, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(314, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(315, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(316, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(317, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(318, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(319, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(320, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(321, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 31, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 8000
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 8016
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 8144
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 8272
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 31
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(322, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(323, t0, 0x4000c00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(324, t0, 0x80008001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(325, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(326, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(327, t0, 0x4000c00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(328, t0, 0x80008001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(329, t0, 0xf50400007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(330, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(331, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(332, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(333, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(334, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(335, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(336, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(337, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 31, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 8400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 8416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 8544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 8672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 31
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(338, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(339, t0, 0x4000c00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(340, t0, 0x80008000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(341, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(342, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(343, t0, 0x4000c00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(344, t0, 0x80008000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(345, t0, 0xf50400007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(346, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(347, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(348, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(349, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(350, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(351, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(352, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(353, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 31, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 8800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 8816
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 8944
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 9072
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 31
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(354, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(355, t0, 0x3fffc00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(356, t0, 0x7fff8000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(357, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(358, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(359, t0, 0x3fffc00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(360, t0, 0x7fff8000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(361, t0, 0xf50400007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(362, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(363, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(364, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(365, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(366, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(367, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(368, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(369, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 31, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 9200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 9216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 9344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 9472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 31
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(370, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(371, t0, 0x3fffc00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(372, t0, 0x7fff8001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(373, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(374, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(375, t0, 0x3fffc00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(376, t0, 0x7fff8001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(377, t0, 0xf50400007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(378, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(379, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(380, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(381, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(382, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(383, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(384, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(385, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 32, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 9600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 9616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 9744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 9872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 32
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(386, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(387, t0, 0x4000c00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(388, t0, 0x80008001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(389, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(390, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(391, t0, 0x4000c00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(392, t0, 0x80008001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(393, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(394, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(395, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(396, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(397, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(398, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(399, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(400, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(401, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 32, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 10000
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 10016
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 10144
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 10272
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 32
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(402, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(403, t0, 0x4000c00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(404, t0, 0x80008000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(405, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(406, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(407, t0, 0x4000c00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(408, t0, 0x80008000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(409, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(410, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(411, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(412, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(413, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(414, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(415, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(416, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(417, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 32, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 10400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 10416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 10544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 10672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 32
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(418, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(419, t0, 0x3fffc00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(420, t0, 0x7fff8000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(421, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(422, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(423, t0, 0x3fffc00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(424, t0, 0x7fff8000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(425, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(426, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(427, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(428, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(429, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(430, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(431, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(432, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(433, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 32, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 10800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 10816
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 10944
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 11072
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 32
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(434, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(435, t0, 0x3fffc00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(436, t0, 0x7fff8001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(437, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(438, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(439, t0, 0x3fffc00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(440, t0, 0x7fff8001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(441, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(442, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(443, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(444, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(445, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(446, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(447, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(448, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(449, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 64, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 11200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 11216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 11344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 11472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 64
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(450, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(451, t0, 0x4000c00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(452, t0, 0x80008001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(453, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(454, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(455, t0, 0x4000c00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(456, t0, 0x80008001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(457, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(458, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(459, t0, 0x4000c00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(460, t0, 0x80008001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(461, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(462, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(463, t0, 0x4000c00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(464, t0, 0x80008001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(465, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 64, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 11600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 11616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 11744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 11872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 64
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(466, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(467, t0, 0x4000c00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(468, t0, 0x80008000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(469, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(470, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(471, t0, 0x4000c00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(472, t0, 0x80008000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(473, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(474, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(475, t0, 0x4000c00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(476, t0, 0x80008000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(477, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(478, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(479, t0, 0x4000c00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(480, t0, 0x80008000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(481, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 64, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 12000
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 12016
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 12144
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 12272
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 64
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(482, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(483, t0, 0x3fffc00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(484, t0, 0x7fff8000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(485, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(486, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(487, t0, 0x3fffc00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(488, t0, 0x7fff8000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(489, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(490, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(491, t0, 0x3fffc00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(492, t0, 0x7fff8000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(493, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(494, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(495, t0, 0x3fffc00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(496, t0, 0x7fff8000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(497, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 64, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 12400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 12416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 12544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 12672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 64
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(498, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(499, t0, 0x3fffc00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(500, t0, 0x7fff8001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(501, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(502, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(503, t0, 0x3fffc00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(504, t0, 0x7fff8001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(505, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(506, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(507, t0, 0x3fffc00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(508, t0, 0x7fff8001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(509, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(510, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(511, t0, 0x3fffc00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(512, t0, 0x7fff8001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(513, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 63, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 12800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 12816
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 12944
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 13072
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 63
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(514, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(515, t0, 0x4000c00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(516, t0, 0x80008001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(517, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(518, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(519, t0, 0x4000c00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(520, t0, 0x80008001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(521, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(522, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(523, t0, 0x4000c00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(524, t0, 0x80008001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(525, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(526, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(527, t0, 0x4000c00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(528, t0, 0x80008001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(529, t0, 0x2cb400007fff8001, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 63, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 13200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 13216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 13344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 13472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 63
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(530, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(531, t0, 0x4000c00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(532, t0, 0x80008000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(533, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(534, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(535, t0, 0x4000c00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(536, t0, 0x80008000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(537, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(538, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(539, t0, 0x4000c00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(540, t0, 0x80008000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(541, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(542, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(543, t0, 0x4000c00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(544, t0, 0x80008000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(545, t0, 0x2cb400007fff8001, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 63, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 13600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 13616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 13744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 13872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 63
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(546, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(547, t0, 0x3fffc00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(548, t0, 0x7fff8000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(549, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(550, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(551, t0, 0x3fffc00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(552, t0, 0x7fff8000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(553, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(554, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(555, t0, 0x3fffc00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(556, t0, 0x7fff8000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(557, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(558, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(559, t0, 0x3fffc00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(560, t0, 0x7fff8000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(561, t0, 0x2cb400007fff8001, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 63, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 14000
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 14016
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 14144
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 14272
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 63
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(562, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(563, t0, 0x3fffc00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(564, t0, 0x7fff8001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(565, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(566, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(567, t0, 0x3fffc00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(568, t0, 0x7fff8001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(569, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(570, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(571, t0, 0x3fffc00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(572, t0, 0x7fff8001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(573, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(574, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(575, t0, 0x3fffc00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(576, t0, 0x7fff8001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(577, t0, 0x2cb400007fff8001, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 65, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 14400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 14416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 14544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 14672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 65
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(578, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(579, t0, 0x4000c00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(580, t0, 0x80008001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(581, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(582, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(583, t0, 0x4000c00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(584, t0, 0x80008001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(585, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(586, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(587, t0, 0x4000c00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(588, t0, 0x80008001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(589, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(590, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(591, t0, 0x4000c00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(592, t0, 0x80008001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(593, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 65, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 14800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 14816
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 14944
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 15072
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 65
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(594, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(595, t0, 0x4000c00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(596, t0, 0x80008000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(597, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(598, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(599, t0, 0x4000c00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(600, t0, 0x80008000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(601, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(602, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(603, t0, 0x4000c00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(604, t0, 0x80008000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(605, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(606, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(607, t0, 0x4000c00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(608, t0, 0x80008000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(609, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 65, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 15200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 15216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 15344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 15472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 65
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(610, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(611, t0, 0x3fffc00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(612, t0, 0x7fff8000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(613, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(614, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(615, t0, 0x3fffc00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(616, t0, 0x7fff8000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(617, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(618, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(619, t0, 0x3fffc00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(620, t0, 0x7fff8000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(621, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(622, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(623, t0, 0x3fffc00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(624, t0, 0x7fff8000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(625, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 65, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 15600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 15616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 15744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 15872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 65
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(626, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(627, t0, 0x3fffc00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(628, t0, 0x7fff8001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(629, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(630, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(631, t0, 0x3fffc00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(632, t0, 0x7fff8001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(633, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(634, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(635, t0, 0x3fffc00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(636, t0, 0x7fff8001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(637, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(638, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(639, t0, 0x3fffc00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(640, t0, 0x7fff8001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(641, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 55, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 16000
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 16016
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 16144
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 16272
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 55
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(642, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(643, t0, 0x4000c00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(644, t0, 0x80008001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(645, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(646, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(647, t0, 0x4000c00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(648, t0, 0x80008001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(649, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(650, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(651, t0, 0x4000c00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(652, t0, 0x80008001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(653, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(654, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(655, t0, 0xd960c00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(656, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(657, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 55, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 16400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 16416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 16544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 16672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 55
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(658, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(659, t0, 0x4000c00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(660, t0, 0x80008000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(661, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(662, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(663, t0, 0x4000c00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(664, t0, 0x80008000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(665, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(666, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(667, t0, 0x4000c00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(668, t0, 0x80008000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(669, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(670, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(671, t0, 0xd960c00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(672, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(673, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 55, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 16800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 16816
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 16944
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 17072
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 55
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(674, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(675, t0, 0x3fffc00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(676, t0, 0x7fff8000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(677, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(678, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(679, t0, 0x3fffc00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(680, t0, 0x7fff8000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(681, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(682, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(683, t0, 0x3fffc00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(684, t0, 0x7fff8000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(685, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(686, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(687, t0, 0xd960c00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(688, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(689, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 55, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 17200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 17216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 17344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 17472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 55
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(690, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(691, t0, 0x3fffc00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(692, t0, 0x7fff8001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(693, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(694, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(695, t0, 0x3fffc00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(696, t0, 0x7fff8001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(697, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(698, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(699, t0, 0x3fffc00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(700, t0, 0x7fff8001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(701, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(702, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(703, t0, 0xd960c00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(704, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(705, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 36, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 17600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 17616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 17744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 17872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 36
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(706, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(707, t0, 0x4000c00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(708, t0, 0x80008001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(709, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(710, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(711, t0, 0x4000c00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(712, t0, 0x80008001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(713, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(714, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(715, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(716, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(717, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(718, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(719, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(720, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(721, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 36, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 18000
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 18016
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 18144
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 18272
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 36
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(722, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(723, t0, 0x4000c00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(724, t0, 0x80008000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(725, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(726, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(727, t0, 0x4000c00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(728, t0, 0x80008000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(729, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(730, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(731, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(732, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(733, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(734, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(735, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(736, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(737, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 36, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 18400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 18416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 18544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 18672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 36
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(738, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(739, t0, 0x3fffc00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(740, t0, 0x7fff8000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(741, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(742, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(743, t0, 0x3fffc00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(744, t0, 0x7fff8000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(745, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(746, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(747, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(748, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(749, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(750, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(751, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(752, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(753, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 36, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 18800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 18816
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 18944
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 19072
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 36
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(754, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(755, t0, 0x3fffc00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(756, t0, 0x7fff8001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(757, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(758, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(759, t0, 0x3fffc00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(760, t0, 0x7fff8001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(761, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(762, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(763, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(764, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(765, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(766, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(767, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(768, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(769, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 25, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 19200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 19216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 19344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 19472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 25
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(770, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(771, t0, 0x4000c00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(772, t0, 0x80008001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(773, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(774, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(775, t0, 0x4000c00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(776, t0, 0xcaced9af287dc004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(777, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(778, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(779, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(780, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(781, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(782, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(783, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(784, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(785, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 25, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 19600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 19616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 19744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 19872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 25
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(786, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(787, t0, 0x4000c00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(788, t0, 0x80008000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(789, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(790, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(791, t0, 0x4000c00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(792, t0, 0xcaced9af287dc004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(793, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(794, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(795, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(796, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(797, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(798, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(799, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(800, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(801, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 25, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 20000
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 20016
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 20144
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 20272
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 25
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(802, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(803, t0, 0x3fffc00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(804, t0, 0x7fff8000c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(805, t0, 0x800000007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(806, t0, 0x8004000600000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(807, t0, 0x3fffc00080087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(808, t0, 0xcaced9af287dc004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(809, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(810, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(811, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(812, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(813, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(814, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(815, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(816, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(817, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 25, LMUL: m8, SEW: e16, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 20400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 20416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 20544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 20672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 25
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(818, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(819, t0, 0x3fffc00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(820, t0, 0x7fff8001c001c004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(821, t0, 0x800100007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(822, t0, 0x8004000600010000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(823, t0, 0x3fffc00180087ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(824, t0, 0xcaced9af287dc004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(825, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(826, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(827, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(828, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(829, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(830, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(831, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(832, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(833, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 0, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 20800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 20816
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 20944
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 21072
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(834, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(835, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(836, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(837, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(838, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(839, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(840, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(841, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(842, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(843, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(844, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(845, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(846, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(847, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(848, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(849, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 0, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 21200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 21216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 21344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 21472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(850, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(851, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(852, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(853, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(854, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(855, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(856, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(857, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(858, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(859, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(860, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(861, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(862, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(863, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(864, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(865, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 0, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 21600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 21616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 21744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 21872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(866, t0, 0xc4471a05aa336841, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(867, t0, 0xe04f4e1de7449153, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(868, t0, 0xc9a4071dc384faa5, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(869, t0, 0x8639daff0f0a714f, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(870, t0, 0xbcedeea38defa9d3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(871, t0, 0xaa7440b4bd2a04d9, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(872, t0, 0x223f5870d8d25f17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(873, t0, 0x1ec7e3165c741bf4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(874, t0, 0xf1e4dfcbea3b8c95, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(875, t0, 0x86f3991cf4d86b96, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(876, t0, 0x12a5ff34a1cbebc4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(877, t0, 0x708cf284d514503f, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(878, t0, 0x24c9be669b052927, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(879, t0, 0x3166106f80370701, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(880, t0, 0x583100519c4b704d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(881, t0, 0x9e231cb7dcf9566c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 0, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 22000
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 22016
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 22144
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 22272
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v8, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v16, v8, v24, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v16 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v16, (a0)


  TEST_CASE(882, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(883, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(884, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(885, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(886, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(887, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(888, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(889, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(890, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(891, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(892, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(893, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(894, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(895, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(896, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(897, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 31, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 22400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 22416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 22544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 22672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 31
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(898, t0, 0x3ad60006ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(899, t0, 0x4000cbfa80086231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(900, t0, 0x8000fa12c001dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(901, t0, 0x8001a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(902, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(903, t0, 0x4000d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(904, t0, 0xcaced9afc0013124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(905, t0, 0xf50471f17fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(906, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(907, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(908, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(909, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(910, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(911, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(912, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(913, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 31, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 22800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 22816
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 22944
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 23072
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 31
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(914, t0, 0x3ad60006ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(915, t0, 0x4000cbfa80086231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(916, t0, 0x8000fa12c001dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(917, t0, 0x8000a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(918, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(919, t0, 0x4000d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(920, t0, 0xcaced9afc0013124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(921, t0, 0xf50471f17fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(922, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(923, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(924, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(925, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(926, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(927, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(928, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(929, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 31, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 23200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 23216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 23344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 23472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 31
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(930, t0, 0x3ad60006ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(931, t0, 0x3fffcbfa80086231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(932, t0, 0x7ffffa12c001dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(933, t0, 0x8000a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(934, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(935, t0, 0x3fffd40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(936, t0, 0xcaced9afc0013124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(937, t0, 0xf50471f17fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(938, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(939, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(940, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(941, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(942, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(943, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(944, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(945, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 31, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 23600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 23616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 23744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 23872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 31
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(946, t0, 0x3ad60006ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(947, t0, 0x3fffcbfa80086231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(948, t0, 0x7ffffa12c001dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(949, t0, 0x8001a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(950, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(951, t0, 0x3fffd40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(952, t0, 0xcaced9afc0013124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(953, t0, 0xf50471f17fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(954, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(955, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(956, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(957, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(958, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(959, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(960, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(961, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 32, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 24000
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 24016
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 24144
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 24272
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 32
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(962, t0, 0x80044ccbddb80000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(963, t0, 0x4000cbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(964, t0, 0xa340fa12c001dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(965, t0, 0x813300007fffc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(966, t0, 0x800400060001a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(967, t0, 0x4000d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(968, t0, 0x8000d9afc0013124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(969, t0, 0xf50400007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(970, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(971, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(972, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(973, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(974, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(975, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(976, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(977, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 32, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 24400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 24416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 24544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 24672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 32
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(978, t0, 0x3ad60006ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(979, t0, 0x4000cbfa80086231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(980, t0, 0x8000fa12c001dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(981, t0, 0x8000a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(982, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(983, t0, 0x4000d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(984, t0, 0xcaced9afc0013124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(985, t0, 0xf50471f17fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(986, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(987, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(988, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(989, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(990, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(991, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(992, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(993, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 32, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 24800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 24816
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 24944
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 25072
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v8, (a0)

# -------------- TEST BEGIN --------------
li t0, 32
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v16, v8, v24, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v16 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v16, (a0)


  TEST_CASE(994, t0, 0x3ad60006ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(995, t0, 0x3fffcbfa80086231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(996, t0, 0x7ffffa12c001dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(997, t0, 0x8000a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(998, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(999, t0, 0x3fffd40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1000, t0, 0xcaced9afc0013124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1001, t0, 0xf50471f17fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1002, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1003, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1004, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1005, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1006, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1007, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1008, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1009, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 32, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 25200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 25216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 25344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 25472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 32
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(1010, t0, 0x3ad60006ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1011, t0, 0x3fffcbfa80086231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1012, t0, 0x7ffffa12c001dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1013, t0, 0x8001a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1014, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1015, t0, 0x3fffd40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1016, t0, 0xcaced9afc0013124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1017, t0, 0xf50471f17fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1018, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1019, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1020, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1021, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1022, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1023, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1024, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1025, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 64, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 25600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 25616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 25744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 25872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 64
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(1026, t0, 0x3ad60006ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1027, t0, 0x4000cbfa80086231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1028, t0, 0x8000fa12c001dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1029, t0, 0x8001a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1030, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1031, t0, 0x4000d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1032, t0, 0xcaced9afc0013124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1033, t0, 0xf50471f17fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1034, t0, 0x80040006cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1035, t0, 0x4000c0014dac7ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1036, t0, 0xea8780019ccec004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1037, t0, 0xb7fb00007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1038, t0, 0x800400064aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1039, t0, 0x40005c5780080392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1040, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1041, t0, 0x2cb424c27fff8001, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 64, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 26000
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 26016
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 26144
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 26272
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 64
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(1042, t0, 0x3ad60006ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1043, t0, 0x4000cbfa80086231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1044, t0, 0x8000fa12c001dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1045, t0, 0x8000a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1046, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1047, t0, 0x4000d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1048, t0, 0xcaced9afc0013124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1049, t0, 0xf50471f17fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1050, t0, 0x80040006cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1051, t0, 0x4000c0004dac7ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1052, t0, 0xea8780009ccec004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1053, t0, 0xb7fb00007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1054, t0, 0x800400064aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1055, t0, 0x40005c5780080392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1056, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1057, t0, 0x2cb424c27fff8001, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 64, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 26400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 26416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 26544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 26672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 64
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(1058, t0, 0x3ad60006ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1059, t0, 0x3fffcbfa80086231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1060, t0, 0x7ffffa12c001dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1061, t0, 0x8000a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1062, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1063, t0, 0x3fffd40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1064, t0, 0xcaced9afc0013124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1065, t0, 0xf50471f17fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1066, t0, 0x80040006cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1067, t0, 0x3fffc0004dac7ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1068, t0, 0xea8780009ccec004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1069, t0, 0xb7fb00007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1070, t0, 0x800400064aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1071, t0, 0x3fff5c5780080392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1072, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1073, t0, 0x2cb424c27fff8001, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 64, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 26800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 26816
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 26944
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 27072
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 64
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(1074, t0, 0x3ad60006ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1075, t0, 0x3fffcbfa80086231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1076, t0, 0x7ffffa12c001dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1077, t0, 0x8001a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1078, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1079, t0, 0x3fffd40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1080, t0, 0xcaced9afc0013124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1081, t0, 0xf50471f17fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1082, t0, 0x80040006cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1083, t0, 0x3fffc0014dac7ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1084, t0, 0xea8780019ccec004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1085, t0, 0xb7fb00007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1086, t0, 0x800400064aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1087, t0, 0x3fff5c5780080392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1088, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1089, t0, 0x2cb424c27fff8001, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 63, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 27200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 27216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 27344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 27472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 63
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(1090, t0, 0x3ad60006ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1091, t0, 0x4000cbfa80086231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1092, t0, 0x8000fa12c001dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1093, t0, 0x8001a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1094, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1095, t0, 0x4000d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1096, t0, 0xcaced9afc0013124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1097, t0, 0xf50471f17fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1098, t0, 0x80040006cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1099, t0, 0x4000c0014dac7ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1100, t0, 0xea8780019ccec004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1101, t0, 0xb7fb00007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1102, t0, 0x800400064aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1103, t0, 0x40005c5780080392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1104, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1105, t0, 0x2cb424c27fff8001, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 63, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 27600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 27616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 27744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 27872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 63
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(1106, t0, 0x3ad60006ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1107, t0, 0x4000cbfa80086231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1108, t0, 0x8000fa12c001dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1109, t0, 0x8000a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1110, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1111, t0, 0x4000d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1112, t0, 0xcaced9afc0013124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1113, t0, 0xf50471f17fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1114, t0, 0x80040006cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1115, t0, 0x4000c0004dac7ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1116, t0, 0xea8780009ccec004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1117, t0, 0xb7fb00007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1118, t0, 0x800400064aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1119, t0, 0x40005c5780080392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1120, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1121, t0, 0x2cb424c27fff8001, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 63, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 28000
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 28016
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 28144
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 28272
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 63
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(1122, t0, 0x3ad60006ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1123, t0, 0x3fffcbfa80086231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1124, t0, 0x7ffffa12c001dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1125, t0, 0x8000a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1126, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1127, t0, 0x3fffd40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1128, t0, 0xcaced9afc0013124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1129, t0, 0xf50471f17fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1130, t0, 0x80040006cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1131, t0, 0x3fffc0004dac7ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1132, t0, 0xea8780009ccec004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1133, t0, 0xb7fb00007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1134, t0, 0x800400064aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1135, t0, 0x3fff5c5780080392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1136, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1137, t0, 0x2cb424c27fff8001, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 63, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 28400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 28416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 28544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 28672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 63
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(1138, t0, 0x3ad60006ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1139, t0, 0x3fffcbfa80086231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1140, t0, 0x7ffffa12c001dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1141, t0, 0x8001a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1142, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1143, t0, 0x3fffd40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1144, t0, 0xcaced9afc0013124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1145, t0, 0xf50471f17fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1146, t0, 0x80040006cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1147, t0, 0x3fffc0014dac7ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1148, t0, 0xea8780019ccec004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1149, t0, 0xb7fb00007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1150, t0, 0x800400064aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1151, t0, 0x3fff5c5780080392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1152, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1153, t0, 0x2cb424c27fff8001, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 65, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 28800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 28816
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 28944
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 29072
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 65
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(1154, t0, 0x3ad60006ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1155, t0, 0x4000cbfa80086231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1156, t0, 0x8000fa12c001dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1157, t0, 0x8001a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1158, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1159, t0, 0x4000d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1160, t0, 0xcaced9afc0013124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1161, t0, 0xf50471f17fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1162, t0, 0x80040006cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1163, t0, 0x4000c0014dac7ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1164, t0, 0xea8780019ccec004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1165, t0, 0xb7fb00007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1166, t0, 0x800400064aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1167, t0, 0x40005c5780080392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1168, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1169, t0, 0x2cb424c27fff8001, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 65, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 29200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 29216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 29344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 29472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 65
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(1170, t0, 0x3ad60006ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1171, t0, 0x4000cbfa80086231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1172, t0, 0x8000fa12c001dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1173, t0, 0x8000a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1174, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1175, t0, 0x4000d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1176, t0, 0xcaced9afc0013124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1177, t0, 0xf50471f17fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1178, t0, 0x80040006cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1179, t0, 0x4000c0004dac7ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1180, t0, 0xea8780009ccec004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1181, t0, 0xb7fb00007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1182, t0, 0x800400064aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1183, t0, 0x40005c5780080392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1184, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1185, t0, 0x2cb424c27fff8001, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 65, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 29600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 29616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 29744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 29872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 65
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(1186, t0, 0x3ad60006ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1187, t0, 0x3fffcbfa80086231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1188, t0, 0x7ffffa12c001dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1189, t0, 0x8000a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1190, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1191, t0, 0x3fffd40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1192, t0, 0xcaced9afc0013124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1193, t0, 0xf50471f17fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1194, t0, 0x80040006cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1195, t0, 0x3fffc0004dac7ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1196, t0, 0xea8780009ccec004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1197, t0, 0xb7fb00007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1198, t0, 0x800400064aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1199, t0, 0x3fff5c5780080392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1200, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1201, t0, 0x2cb424c27fff8001, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 65, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 30000
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 30016
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 30144
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 30272
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 65
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(1202, t0, 0x3ad60006ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1203, t0, 0x3fffcbfa80086231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1204, t0, 0x7ffffa12c001dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1205, t0, 0x8001a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1206, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1207, t0, 0x3fffd40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1208, t0, 0xcaced9afc0013124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1209, t0, 0xf50471f17fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1210, t0, 0x80040006cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1211, t0, 0x3fffc0014dac7ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1212, t0, 0xea8780019ccec004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1213, t0, 0xb7fb00007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1214, t0, 0x800400064aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1215, t0, 0x3fff5c5780080392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1216, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1217, t0, 0x2cb424c27fff8001, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 55, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 30400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 30416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 30544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 30672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 55
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(1218, t0, 0x3ad60006ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1219, t0, 0x4000cbfa80086231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1220, t0, 0x8000fa12c001dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1221, t0, 0x8001a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1222, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1223, t0, 0x4000d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1224, t0, 0xcaced9afc0013124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1225, t0, 0xf50471f17fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1226, t0, 0x80040006cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1227, t0, 0x4000c0014dac7ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1228, t0, 0xea8780019ccec004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1229, t0, 0xb7fb00007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1230, t0, 0x800400064aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1231, t0, 0xd9605c5780080392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1232, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1233, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 55, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 30800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 30816
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 30944
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 31072
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 55
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(1234, t0, 0x3ad60006ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1235, t0, 0x4000cbfa80086231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1236, t0, 0x8000fa12c001dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1237, t0, 0x8000a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1238, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1239, t0, 0x4000d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1240, t0, 0xcaced9afc0013124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1241, t0, 0xf50471f17fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1242, t0, 0x80040006cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1243, t0, 0x4000c0004dac7ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1244, t0, 0xea8780009ccec004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1245, t0, 0xb7fb00007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1246, t0, 0x800400064aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1247, t0, 0xd9605c5780080392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1248, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1249, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 55, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 31200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 31216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 31344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 31472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 55
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(1250, t0, 0x3ad60006ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1251, t0, 0x3fffcbfa80086231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1252, t0, 0x7ffffa12c001dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1253, t0, 0x8000a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1254, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1255, t0, 0x3fffd40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1256, t0, 0xcaced9afc0013124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1257, t0, 0xf50471f17fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1258, t0, 0x80040006cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1259, t0, 0x3fffc0004dac7ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1260, t0, 0xea8780009ccec004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1261, t0, 0xb7fb00007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1262, t0, 0x800400064aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1263, t0, 0xd9605c5780080392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1264, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1265, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 55, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 31600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 31616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 31744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 31872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 55
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(1266, t0, 0x3ad60006ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1267, t0, 0x3fffcbfa80086231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1268, t0, 0x7ffffa12c001dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1269, t0, 0x8001a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1270, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1271, t0, 0x3fffd40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1272, t0, 0xcaced9afc0013124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1273, t0, 0xf50471f17fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1274, t0, 0x80040006cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1275, t0, 0x3fffc0014dac7ffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1276, t0, 0xea8780019ccec004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1277, t0, 0xb7fb00007fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1278, t0, 0x800400064aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1279, t0, 0xd9605c5780080392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1280, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1281, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 36, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 32000
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 32016
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 32144
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 32272
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 36
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(1282, t0, 0x3ad60006ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1283, t0, 0x4000cbfa80086231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1284, t0, 0x8000fa12c001dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1285, t0, 0x8001a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1286, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1287, t0, 0x4000d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1288, t0, 0xcaced9afc0013124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1289, t0, 0xf50471f17fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1290, t0, 0x80040006cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1291, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1292, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1293, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1294, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1295, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1296, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1297, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 36, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 32400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 32416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 32544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 32672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 36
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(1298, t0, 0x3ad60006ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1299, t0, 0x4000cbfa80086231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1300, t0, 0x8000fa12c001dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1301, t0, 0x8000a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1302, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1303, t0, 0x4000d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1304, t0, 0xcaced9afc0013124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1305, t0, 0xf50471f17fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1306, t0, 0x80040006cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1307, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1308, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1309, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1310, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1311, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1312, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1313, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 36, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 32800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 32816
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 32944
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 33072
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 36
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(1314, t0, 0x3ad60006ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1315, t0, 0x3fffcbfa80086231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1316, t0, 0x7ffffa12c001dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1317, t0, 0x8000a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1318, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1319, t0, 0x3fffd40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1320, t0, 0xcaced9afc0013124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1321, t0, 0xf50471f17fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1322, t0, 0x80040006cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1323, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1324, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1325, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1326, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1327, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1328, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1329, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 36, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 33200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 33216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 33344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 33472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 36
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(1330, t0, 0x3ad60006ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1331, t0, 0x3fffcbfa80086231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1332, t0, 0x7ffffa12c001dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1333, t0, 0x8001a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1334, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1335, t0, 0x3fffd40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1336, t0, 0xcaced9afc0013124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1337, t0, 0xf50471f17fff8001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1338, t0, 0x80040006cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1339, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1340, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1341, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1342, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1343, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1344, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1345, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 25, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 33600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 33616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 33744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 33872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 25
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(1346, t0, 0x3ad60006ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1347, t0, 0x4000cbfa80086231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1348, t0, 0x8000fa12c001dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1349, t0, 0x8001a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1350, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1351, t0, 0x4000d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1352, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1353, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1354, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1355, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1356, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1357, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1358, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1359, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1360, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1361, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 25, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 34000
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 34016
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 34144
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 34272
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 25
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(1362, t0, 0x827500067a8e6289, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1363, t0, 0x400025fb8008e7b0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1364, t0, 0x8000669dc0013fbb, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1365, t0, 0x8000f32e585b001e, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1366, t0, 0x92a790cde1662ea7, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1367, t0, 0x400074bc68e6b84a, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1368, t0, 0xe2f19f7c0bac2a25, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1369, t0, 0x2b11fbbf60038b38, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1370, t0, 0x6ebdb6e849bd2b05, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1371, t0, 0x1fcb37206dd5cb27, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1372, t0, 0xb9f7cb9b9c84ca38, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1373, t0, 0x79ba9a947fdeff35, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1374, t0, 0x282b0efdc87c7f93, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1375, t0, 0x6c2029795432bb9, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1376, t0, 0xb0d540c53a7acca6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1377, t0, 0xa59b7f6b81ddab6b, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 25, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 34400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 34416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 34544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 34672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 25
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(1378, t0, 0x3ad60006ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1379, t0, 0x3fffcbfa80086231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1380, t0, 0x7ffffa12c001dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1381, t0, 0x8000a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1382, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1383, t0, 0x3fffd40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1384, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1385, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1386, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1387, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1388, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1389, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1390, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1391, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1392, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1393, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 25, LMUL: m8, SEW: e16, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 34800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 34816
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 34944
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 35072
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vle16.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 25
vsetvli t1, t0, e16,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e16,m8,tu,mu
vse16.v v8, (a0)


  TEST_CASE(1394, t0, 0x3ad60006ddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1395, t0, 0x3fffcbfa80086231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1396, t0, 0x7ffffa12c001dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1397, t0, 0x8001a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1398, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1399, t0, 0x3fffd40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1400, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1401, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1402, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1403, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1404, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1405, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1406, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1407, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1408, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1409, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 0, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 35200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 35216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 35344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 35472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1410, t0, 0xc4471a05aa336841, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1411, t0, 0xe04f4e1de7449153, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1412, t0, 0xc9a4071dc384faa5, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1413, t0, 0x8639daff0f0a714f, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1414, t0, 0xbcedeea38defa9d3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1415, t0, 0xaa7440b4bd2a04d9, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1416, t0, 0x223f5870d8d25f17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1417, t0, 0x1ec7e3165c741bf4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1418, t0, 0xf1e4dfcbea3b8c95, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1419, t0, 0x86f3991cf4d86b96, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1420, t0, 0x12a5ff34a1cbebc4, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1421, t0, 0x708cf284d514503f, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1422, t0, 0x24c9be669b052927, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1423, t0, 0x3166106f80370701, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1424, t0, 0x583100519c4b704d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1425, t0, 0x9e231cb7dcf9566c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 0, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 35600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 35616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 35744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 35872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1426, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1427, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1428, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1429, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1430, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1431, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1432, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1433, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1434, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1435, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1436, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1437, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1438, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1439, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1440, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1441, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 0, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 36000
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 36016
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 36144
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 36272
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1442, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1443, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1444, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1445, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1446, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1447, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1448, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1449, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1450, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1451, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1452, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1453, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1454, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1455, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1456, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1457, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 0, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 36400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 36416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 36544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 36672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1458, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1459, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1460, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1461, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1462, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1463, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1464, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1465, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1466, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1467, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1468, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1469, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1470, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1471, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1472, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1473, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 15, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 36800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 36816
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 36944
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 37072
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1474, t0, 0x100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1475, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1476, t0, 0x800000087ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1477, t0, 0x40000000c0000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1478, t0, 0xc0000001c0000004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1479, t0, 0x8000000080000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1480, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1481, t0, 0xf50471f100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1482, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1483, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1484, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1485, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1486, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1487, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1488, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1489, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 15, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 37200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 37216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 37344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 37472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1490, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1491, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1492, t0, 0x800000087ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1493, t0, 0x40000000c0000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1494, t0, 0xc0000001c0000004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1495, t0, 0x8000000080000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1496, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1497, t0, 0xf50471f100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1498, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1499, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1500, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1501, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1502, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1503, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1504, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1505, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 15, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 37600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 37616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 37744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 37872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1506, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1507, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1508, t0, 0x800000087ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1509, t0, 0x3fffffffc0000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1510, t0, 0xc0000001c0000004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1511, t0, 0x7fffffff80000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1512, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1513, t0, 0xf50471f100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1514, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1515, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1516, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1517, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1518, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1519, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1520, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1521, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 15, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 38000
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 38016
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 38144
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 38272
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1522, t0, 0x100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1523, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1524, t0, 0x800000087ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1525, t0, 0x3fffffffc0000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1526, t0, 0xc0000001c0000004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1527, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1528, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1529, t0, 0xf50471f100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1530, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1531, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1532, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1533, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1534, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1535, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1536, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1537, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 16, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 38400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 38416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 38544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 38672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1538, t0, 0x100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1539, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1540, t0, 0x800000087ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1541, t0, 0x40000000c0000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1542, t0, 0xc0000001c0000004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1543, t0, 0x8000000080000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1544, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1545, t0, 0x8000000100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1546, t0, 0xb4b36d08ee4bd10e, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1547, t0, 0x4e47b55bd4754e41, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1548, t0, 0xbf9292ce430fc9aa, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1549, t0, 0x6fb72b91507ea741, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1550, t0, 0xce15d7a34aa897a, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1551, t0, 0x7f34fb38784d85b8, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1552, t0, 0xf1d653235345cfec, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1553, t0, 0x7ae85ce71ba2d65e, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 16, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 38800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 38816
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 38944
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 39072
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1554, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1555, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1556, t0, 0x800000087ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1557, t0, 0x40000000c0000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1558, t0, 0xc0000001c0000004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1559, t0, 0x8000000080000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1560, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1561, t0, 0x8000000000000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1562, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1563, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1564, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1565, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1566, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1567, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1568, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1569, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 16, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 39200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 39216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 39344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 39472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1570, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1571, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1572, t0, 0x800000087ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1573, t0, 0x3fffffffc0000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1574, t0, 0xc0000001c0000004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1575, t0, 0x7fffffff80000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1576, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1577, t0, 0x8000000000000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1578, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1579, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1580, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1581, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1582, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1583, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1584, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1585, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 16, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 39600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 39616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 39744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 39872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1586, t0, 0x100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1587, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1588, t0, 0x800000087ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1589, t0, 0x3fffffffc0000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1590, t0, 0xc0000001c0000004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1591, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1592, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1593, t0, 0x8000000100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1594, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1595, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1596, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1597, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1598, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1599, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1600, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1601, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 32, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 40000
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 40016
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 40144
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 40272
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 32
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1602, t0, 0x100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1603, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1604, t0, 0x800000087ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1605, t0, 0x40000000c0000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1606, t0, 0xc0000001c0000004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1607, t0, 0x8000000080000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1608, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1609, t0, 0x8000000100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1610, t0, 0x100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1611, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1612, t0, 0x800000087ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1613, t0, 0x40000000c0000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1614, t0, 0xc0000001c0000004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1615, t0, 0x8000000080000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1616, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1617, t0, 0x8000000100000000, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 32, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 40400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 40416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 40544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 40672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 32
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1618, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1619, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1620, t0, 0x800000087ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1621, t0, 0x40000000c0000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1622, t0, 0xc0000001c0000004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1623, t0, 0x8000000080000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1624, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1625, t0, 0x8000000000000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1626, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1627, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1628, t0, 0x800000087ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1629, t0, 0x40000000c0000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1630, t0, 0xc0000001c0000004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1631, t0, 0x8000000080000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1632, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1633, t0, 0x8000000000000000, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 32, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 40800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 40816
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 40944
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 41072
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 32
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1634, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1635, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1636, t0, 0x800000087ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1637, t0, 0x3fffffffc0000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1638, t0, 0xc0000001c0000004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1639, t0, 0x7fffffff80000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1640, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1641, t0, 0x8000000000000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1642, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1643, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1644, t0, 0x800000087ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1645, t0, 0x3fffffffc0000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1646, t0, 0xc0000001c0000004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1647, t0, 0x7fffffff80000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1648, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1649, t0, 0x8000000000000000, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 32, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 41200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 41216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 41344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 41472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 32
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1650, t0, 0x100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1651, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1652, t0, 0x800000087ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1653, t0, 0x3fffffffc0000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1654, t0, 0xc0000001c0000004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1655, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1656, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1657, t0, 0x8000000100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1658, t0, 0x100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1659, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1660, t0, 0x800000087ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1661, t0, 0x3fffffffc0000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1662, t0, 0xc0000001c0000004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1663, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1664, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1665, t0, 0x8000000100000000, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 31, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 41600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 41616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 41744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 41872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 31
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1666, t0, 0x100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1667, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1668, t0, 0x800000087ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1669, t0, 0x40000000c0000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1670, t0, 0xc0000001c0000004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1671, t0, 0x8000000080000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1672, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1673, t0, 0x8000000100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1674, t0, 0x100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1675, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1676, t0, 0x800000087ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1677, t0, 0x40000000c0000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1678, t0, 0xc0000001c0000004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1679, t0, 0x8000000080000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1680, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1681, t0, 0x2cb424c200000000, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 31, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 42000
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 42016
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 42144
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 42272
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 31
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1682, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1683, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1684, t0, 0x800000087ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1685, t0, 0x40000000c0000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1686, t0, 0xc0000001c0000004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1687, t0, 0x8000000080000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1688, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1689, t0, 0x8000000000000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1690, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1691, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1692, t0, 0x800000087ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1693, t0, 0x40000000c0000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1694, t0, 0xc0000001c0000004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1695, t0, 0x8000000080000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1696, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1697, t0, 0x2cb424c200000000, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 31, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 42400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 42416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 42544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 42672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 31
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1698, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1699, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1700, t0, 0x800000087ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1701, t0, 0x3fffffffc0000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1702, t0, 0xc0000001c0000004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1703, t0, 0x7fffffff80000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1704, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1705, t0, 0x8000000000000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1706, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1707, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1708, t0, 0x800000087ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1709, t0, 0x3fffffffc0000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1710, t0, 0xc0000001c0000004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1711, t0, 0x7fffffff80000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1712, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1713, t0, 0xa59b7f6b00000000, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 31, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 42800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 42816
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 42944
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 43072
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 31
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1714, t0, 0x100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1715, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1716, t0, 0x800000087ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1717, t0, 0x3fffffffc0000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1718, t0, 0xc0000001c0000004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1719, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1720, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1721, t0, 0x8000000100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1722, t0, 0x100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1723, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1724, t0, 0x800000087ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1725, t0, 0x3fffffffc0000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1726, t0, 0xc0000001c0000004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1727, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1728, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1729, t0, 0x2cb424c200000000, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 33, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 43200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 43216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 43344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 43472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 33
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1730, t0, 0x100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1731, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1732, t0, 0x800000087ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1733, t0, 0x40000000c0000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1734, t0, 0xc0000001c0000004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1735, t0, 0x8000000080000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1736, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1737, t0, 0x8000000100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1738, t0, 0x100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1739, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1740, t0, 0x800000087ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1741, t0, 0x40000000c0000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1742, t0, 0xc0000001c0000004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1743, t0, 0x8000000080000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1744, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1745, t0, 0x8000000100000000, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 33, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 43600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 43616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 43744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 43872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 33
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1746, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1747, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1748, t0, 0x800000087ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1749, t0, 0x40000000c0000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1750, t0, 0xc0000001c0000004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1751, t0, 0x8000000080000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1752, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1753, t0, 0x8000000000000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1754, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1755, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1756, t0, 0x800000087ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1757, t0, 0x40000000c0000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1758, t0, 0xc0000001c0000004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1759, t0, 0x8000000080000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1760, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1761, t0, 0x8000000000000000, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 33, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 44000
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 44016
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 44144
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 44272
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 33
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1762, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1763, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1764, t0, 0x800000087ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1765, t0, 0x3fffffffc0000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1766, t0, 0xc0000001c0000004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1767, t0, 0x7fffffff80000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1768, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1769, t0, 0x8000000000000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1770, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1771, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1772, t0, 0x800000087ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1773, t0, 0x3fffffffc0000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1774, t0, 0xc0000001c0000004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1775, t0, 0x7fffffff80000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1776, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1777, t0, 0x8000000000000000, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 33, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 44400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 44416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 44544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 44672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 33
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1778, t0, 0x100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1779, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1780, t0, 0x800000087ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1781, t0, 0x3fffffffc0000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1782, t0, 0xc0000001c0000004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1783, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1784, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1785, t0, 0x8000000100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1786, t0, 0x100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1787, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1788, t0, 0x800000087ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1789, t0, 0x3fffffffc0000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1790, t0, 0xc0000001c0000004, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1791, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1792, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1793, t0, 0x8000000100000000, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 2, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 44800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 44816
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 44944
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 45072
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 2
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1794, t0, 0x100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1795, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1796, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1797, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1798, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1799, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1800, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1801, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1802, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1803, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1804, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1805, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1806, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1807, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1808, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1809, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 2, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 45200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 45216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 45344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 45472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 2
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1810, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1811, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1812, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1813, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1814, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1815, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1816, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1817, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1818, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1819, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1820, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1821, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1822, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1823, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1824, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1825, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 2, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 45600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 45616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 45744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 45872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 2
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1826, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1827, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1828, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1829, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1830, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1831, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1832, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1833, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1834, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1835, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1836, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1837, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1838, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1839, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1840, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1841, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 2, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 46000
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 46016
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 46144
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 46272
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 2
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1842, t0, 0x100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1843, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1844, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1845, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1846, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1847, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1848, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1849, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1850, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1851, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1852, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1853, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1854, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1855, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1856, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1857, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 3, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 46400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 46416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 46544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 46672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 3
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1858, t0, 0x100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1859, t0, 0xf3dccbfa00000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1860, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1861, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1862, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1863, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1864, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1865, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1866, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1867, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1868, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1869, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1870, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1871, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1872, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1873, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 3, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 46800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 46816
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 46944
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 47072
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 3
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1874, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1875, t0, 0xf3dccbfa00000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1876, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1877, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1878, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1879, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1880, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1881, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1882, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1883, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1884, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1885, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1886, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1887, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1888, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1889, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 3, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 47200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 47216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 47344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 47472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 3
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1890, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1891, t0, 0xf3dccbfa00000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1892, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1893, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1894, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1895, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1896, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1897, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1898, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1899, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1900, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1901, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1902, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1903, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1904, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1905, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 3, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 47600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 47616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 47744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 47872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 3
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1906, t0, 0x100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1907, t0, 0xf3dccbfa00000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1908, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1909, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1910, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1911, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1912, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1913, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1914, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1915, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1916, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1917, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1918, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1919, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1920, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1921, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 5, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 48000
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 48016
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 48144
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 48272
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 5
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1922, t0, 0x100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1923, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1924, t0, 0xa340fa127ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1925, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1926, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1927, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1928, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1929, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1930, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1931, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1932, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1933, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1934, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1935, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1936, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1937, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 5, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 48400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 48416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 48544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 48672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 5
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1938, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1939, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1940, t0, 0xa340fa127ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1941, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1942, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1943, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1944, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1945, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1946, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1947, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1948, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1949, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1950, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1951, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1952, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1953, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 5, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 48800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 48816
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 48944
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 49072
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 5
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1954, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1955, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1956, t0, 0xa340fa127ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1957, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1958, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1959, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1960, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1961, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1962, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1963, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1964, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1965, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1966, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1967, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1968, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1969, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 5, LMUL: m8, SEW: e32, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 49200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 49216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 49344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 49472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 5
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1970, t0, 0x100000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1971, t0, 0x8000000400000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1972, t0, 0xa340fa127ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1973, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1974, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1975, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1976, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1977, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1978, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1979, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1980, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1981, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1982, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1983, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1984, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1985, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 0, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 49600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 49616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 49744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 49872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(1986, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1987, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1988, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1989, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1990, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1991, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1992, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1993, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1994, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1995, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1996, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1997, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1998, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(1999, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2000, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2001, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 0, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 50000
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 50016
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 50144
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 50272
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2002, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2003, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2004, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2005, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2006, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2007, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2008, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2009, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2010, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2011, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2012, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2013, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2014, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2015, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2016, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2017, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 0, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 50400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 50416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 50544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 50672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2018, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2019, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2020, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2021, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2022, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2023, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2024, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2025, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2026, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2027, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2028, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2029, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2030, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2031, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2032, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2033, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 0, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 50800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 50816
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 50944
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 51072
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2034, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2035, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2036, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2037, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2038, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2039, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2040, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2041, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2042, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2043, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2044, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2045, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2046, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2047, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2048, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2049, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 15, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 51200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 51216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 51344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 51472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2050, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2051, t0, 0xf3dccbfa00000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2052, t0, 0x800000084cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2053, t0, 0x40000000228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2054, t0, 0xc0000001b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2055, t0, 0x8000000047cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2056, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2057, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2058, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2059, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2060, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2061, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2062, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2063, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2064, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2065, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 15, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 51600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 51616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 51744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 51872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2066, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2067, t0, 0xf3dccbfa00000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2068, t0, 0x800000084cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2069, t0, 0x40000000228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2070, t0, 0xc0000001b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2071, t0, 0x8000000047cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2072, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2073, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2074, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2075, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2076, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2077, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2078, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2079, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2080, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2081, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 15, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 52000
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 52016
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 52144
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 52272
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2082, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2083, t0, 0xf3dccbfa00000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2084, t0, 0x800000084cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2085, t0, 0x3fffffff228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2086, t0, 0xc0000001b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2087, t0, 0x7fffffff47cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2088, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2089, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2090, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2091, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2092, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2093, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2094, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2095, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2096, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2097, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 15, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 52400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 52416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 52544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 52672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 15
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2098, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2099, t0, 0xf3dccbfa00000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2100, t0, 0x800000084cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2101, t0, 0x3fffffff228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2102, t0, 0xc0000001b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2103, t0, 0x7fffffff47cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2104, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2105, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2106, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2107, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2108, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2109, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2110, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2111, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2112, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2113, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 16, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 52800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 52816
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 52944
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 53072
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2114, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2115, t0, 0xf3dccbfa00000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2116, t0, 0x800000084cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2117, t0, 0x40000000228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2118, t0, 0xc0000001b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2119, t0, 0x8000000047cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2120, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2121, t0, 0x80000001efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2122, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2123, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2124, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2125, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2126, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2127, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2128, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2129, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 16, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 53200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 53216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 53344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 53472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2130, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2131, t0, 0xf3dccbfa00000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2132, t0, 0x800000084cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2133, t0, 0x40000000228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2134, t0, 0xc0000001b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2135, t0, 0x8000000047cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2136, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2137, t0, 0x80000000efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2138, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2139, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2140, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2141, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2142, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2143, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2144, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2145, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 16, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 53600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 53616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 53744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 53872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2146, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2147, t0, 0xf3dccbfa00000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2148, t0, 0x800000084cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2149, t0, 0x3fffffff228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2150, t0, 0xc0000001b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2151, t0, 0x7fffffff47cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2152, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2153, t0, 0x80000000efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2154, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2155, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2156, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2157, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2158, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2159, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2160, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2161, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 16, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 54000
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 54016
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 54144
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 54272
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 16
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2162, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2163, t0, 0xf3dccbfa00000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2164, t0, 0x800000084cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2165, t0, 0x3fffffff228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2166, t0, 0xc0000001b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2167, t0, 0x7fffffff47cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2168, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2169, t0, 0x80000001efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2170, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2171, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2172, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2173, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2174, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2175, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2176, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2177, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 32, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 54400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 54416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 54544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 54672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 32
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2178, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2179, t0, 0xf3dccbfa00000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2180, t0, 0x800000084cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2181, t0, 0x40000000228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2182, t0, 0xc0000001b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2183, t0, 0x8000000047cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2184, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2185, t0, 0x80000001efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2186, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2187, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2188, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2189, t0, 0x40000000d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2190, t0, 0xc00000014aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2191, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2192, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2193, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 32, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 54800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 54816
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 54944
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 55072
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 32
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2194, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2195, t0, 0xf3dccbfa00000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2196, t0, 0x800000084cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2197, t0, 0x40000000228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2198, t0, 0xc0000001b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2199, t0, 0x8000000047cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2200, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2201, t0, 0x80000000efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2202, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2203, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2204, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2205, t0, 0x40000000d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2206, t0, 0xc00000014aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2207, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2208, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2209, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 32, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 55200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 55216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 55344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 55472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 32
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2210, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2211, t0, 0xf3dccbfa00000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2212, t0, 0x800000084cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2213, t0, 0x3fffffff228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2214, t0, 0xc0000001b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2215, t0, 0x7fffffff47cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2216, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2217, t0, 0x80000000efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2218, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2219, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2220, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2221, t0, 0x3fffffffd8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2222, t0, 0xc00000014aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2223, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2224, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2225, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 32, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 55600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 55616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 55744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 55872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 32
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2226, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2227, t0, 0xf3dccbfa00000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2228, t0, 0x800000084cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2229, t0, 0x3fffffff228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2230, t0, 0xc0000001b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2231, t0, 0x7fffffff47cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2232, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2233, t0, 0x80000001efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2234, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2235, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2236, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2237, t0, 0x3fffffffd8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2238, t0, 0xc00000014aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2239, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2240, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2241, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 31, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 56000
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 56016
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 56144
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 56272
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 31
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2242, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2243, t0, 0xf3dccbfa00000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2244, t0, 0x800000084cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2245, t0, 0x40000000228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2246, t0, 0xc0000001b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2247, t0, 0x8000000047cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2248, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2249, t0, 0x80000001efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2250, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2251, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2252, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2253, t0, 0x40000000d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2254, t0, 0xc00000014aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2255, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2256, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2257, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 31, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 56400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 56416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 56544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 56672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 31
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2258, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2259, t0, 0xf3dccbfa00000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2260, t0, 0x800000084cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2261, t0, 0x40000000228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2262, t0, 0xc0000001b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2263, t0, 0x8000000047cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2264, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2265, t0, 0x80000000efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2266, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2267, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2268, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2269, t0, 0x40000000d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2270, t0, 0xc00000014aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2271, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2272, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2273, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 31, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 56800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 56816
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 56944
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 57072
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 31
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2274, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2275, t0, 0xf3dccbfa00000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2276, t0, 0x800000084cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2277, t0, 0x3fffffff228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2278, t0, 0xc0000001b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2279, t0, 0x7fffffff47cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2280, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2281, t0, 0x80000000efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2282, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2283, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2284, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2285, t0, 0x3fffffffd8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2286, t0, 0xc00000014aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2287, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2288, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2289, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 31, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 57200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 57216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 57344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 57472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 31
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2290, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2291, t0, 0xf3dccbfa00000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2292, t0, 0x800000084cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2293, t0, 0x3fffffff228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2294, t0, 0xc0000001b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2295, t0, 0x7fffffff47cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2296, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2297, t0, 0x80000001efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2298, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2299, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2300, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2301, t0, 0x3fffffffd8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2302, t0, 0xc00000014aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2303, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2304, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2305, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 33, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 57600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 57616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 57744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 57872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 33
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2306, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2307, t0, 0xf3dccbfa00000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2308, t0, 0x800000084cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2309, t0, 0x40000000228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2310, t0, 0xc0000001b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2311, t0, 0x8000000047cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2312, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2313, t0, 0x80000001efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2314, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2315, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2316, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2317, t0, 0x40000000d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2318, t0, 0xc00000014aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2319, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2320, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2321, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 33, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 58000
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 58016
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 58144
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 58272
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 33
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2322, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2323, t0, 0xf3dccbfa00000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2324, t0, 0x800000084cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2325, t0, 0x40000000228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2326, t0, 0xc0000001b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2327, t0, 0x8000000047cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2328, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2329, t0, 0x80000000efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2330, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2331, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2332, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2333, t0, 0x40000000d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2334, t0, 0xc00000014aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2335, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2336, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2337, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 33, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 58400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 58416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 58544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 58672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 33
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2338, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2339, t0, 0xf3dccbfa00000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2340, t0, 0x800000084cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2341, t0, 0x3fffffff228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2342, t0, 0xc0000001b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2343, t0, 0x7fffffff47cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2344, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2345, t0, 0x80000000efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2346, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2347, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2348, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2349, t0, 0x3fffffffd8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2350, t0, 0xc00000014aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2351, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2352, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2353, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 33, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 58800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 58816
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 58944
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 59072
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 33
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2354, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2355, t0, 0xf3dccbfa00000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2356, t0, 0x800000084cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2357, t0, 0x3fffffff228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2358, t0, 0xc0000001b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2359, t0, 0x7fffffff47cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2360, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2361, t0, 0x80000001efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2362, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2363, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2364, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2365, t0, 0x3fffffffd8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2366, t0, 0xc00000014aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2367, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2368, t0, 0x7fffffff80000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2369, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 2, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 59200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 59216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 59344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 59472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 2
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2370, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2371, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2372, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2373, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2374, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2375, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2376, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2377, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2378, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2379, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2380, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2381, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2382, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2383, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2384, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2385, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 2, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 59600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 59616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 59744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 59872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 2
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2386, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2387, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2388, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2389, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2390, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2391, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2392, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2393, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2394, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2395, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2396, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2397, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2398, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2399, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2400, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2401, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 2, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 60000
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 60016
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 60144
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 60272
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 2
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2402, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2403, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2404, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2405, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2406, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2407, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2408, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2409, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2410, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2411, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2412, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2413, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2414, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2415, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2416, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2417, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 2, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 60400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 60416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 60544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 60672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 2
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2418, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2419, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2420, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2421, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2422, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2423, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2424, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2425, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2426, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2427, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2428, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2429, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2430, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2431, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2432, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2433, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 3, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 60800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 60816
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 60944
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 61072
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 3
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2434, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2435, t0, 0xf3dccbfa00000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2436, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2437, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2438, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2439, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2440, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2441, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2442, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2443, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2444, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2445, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2446, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2447, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2448, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2449, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 3, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 61200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 61216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 61344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 61472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 3
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2450, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2451, t0, 0xf3dccbfa00000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2452, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2453, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2454, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2455, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2456, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2457, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2458, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2459, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2460, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2461, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2462, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2463, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2464, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2465, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 3, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 61600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 61616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 61744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 61872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 3
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2466, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2467, t0, 0xf3dccbfa00000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2468, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2469, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2470, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2471, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2472, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2473, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2474, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2475, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2476, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2477, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2478, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2479, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2480, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2481, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 3, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 62000
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 62016
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 62144
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 62272
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 3
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2482, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2483, t0, 0xf3dccbfa00000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2484, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2485, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2486, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2487, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2488, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2489, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2490, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2491, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2492, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2493, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2494, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2495, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2496, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2497, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 5, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 62400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 62416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 62544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 62672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 5
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2498, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2499, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2500, t0, 0xa340fa127ffffffc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2501, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2502, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2503, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2504, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2505, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2506, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2507, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2508, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2509, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2510, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2511, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2512, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2513, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 5, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 62800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 62816
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 62944
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 63072
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 5
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2514, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2515, t0, 0xf3dccbfa00000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2516, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2517, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2518, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2519, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2520, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2521, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2522, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2523, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2524, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2525, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2526, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2527, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2528, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2529, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 5, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 63200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 63216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 63344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 63472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 5
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2530, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2531, t0, 0xf3dccbfa00000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2532, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2533, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2534, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2535, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2536, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2537, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2538, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2539, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2540, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2541, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2542, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2543, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2544, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2545, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 5, LMUL: m8, SEW: e32, Mask: true

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 63600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 63616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 63744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 63872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vle32.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 5
vsetvli t1, t0, e32,m8,tu,mu
vasubu.vv v8, v24, v16, v0.t
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e32,m8,tu,mu
vse32.v v8, (a0)


  TEST_CASE(2546, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2547, t0, 0xf3dccbfa00000006, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2548, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2549, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2550, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2551, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2552, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2553, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2554, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2555, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2556, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2557, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2558, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2559, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2560, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2561, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 0, LMUL: m8, SEW: e64, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 64000
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 64016
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 64144
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 64272
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e64,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vse64.v v8, (a0)


  TEST_CASE(2562, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2563, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2564, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2565, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2566, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2567, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2568, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2569, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2570, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2571, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2572, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2573, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2574, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2575, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2576, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2577, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 0, LMUL: m8, SEW: e64, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 64400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 64416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 64544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 64672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e64,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vse64.v v8, (a0)


  TEST_CASE(2578, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2579, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2580, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2581, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2582, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2583, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2584, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2585, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2586, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2587, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2588, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2589, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2590, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2591, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2592, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2593, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 0, LMUL: m8, SEW: e64, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 64800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 64816
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 64944
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 65072
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e64,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vse64.v v8, (a0)


  TEST_CASE(2594, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2595, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2596, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2597, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2598, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2599, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2600, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2601, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2602, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2603, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2604, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2605, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2606, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2607, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2608, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2609, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 0, LMUL: m8, SEW: e64, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 65200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 65216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 65344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 65472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 0
vsetvli t1, t0, e64,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vse64.v v8, (a0)


  TEST_CASE(2610, t0, 0x3ad64ccbddb8bebc, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2611, t0, 0xf3dccbfaddff6231, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2612, t0, 0xa340fa124cb8dc1d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2613, t0, 0x8133a51e228fc5c6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2614, t0, 0x7d115150b866a93d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2615, t0, 0xe3c0d40947cd3b17, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2616, t0, 0xcaced9af287d3124, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2617, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2618, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2619, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2620, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2621, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2622, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2623, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2624, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2625, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 7, LMUL: m8, SEW: e64, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 65600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 65616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 65744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 65872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e64,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vse64.v v8, (a0)


  TEST_CASE(2626, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2627, t0, 0x1, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2628, t0, 0x6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2629, t0, 0x7fffffffffffc000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2630, t0, 0x8000000040000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2631, t0, 0x3fffc000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2632, t0, 0x4000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2633, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2634, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2635, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2636, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2637, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2638, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2639, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2640, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2641, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 7, LMUL: m8, SEW: e64, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 66000
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 66016
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 66144
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 66272
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e64,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vse64.v v8, (a0)


  TEST_CASE(2642, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2643, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2644, t0, 0x6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2645, t0, 0x7fffffffffffc000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2646, t0, 0x8000000040000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2647, t0, 0x3fffc000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2648, t0, 0x4000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2649, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2650, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2651, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2652, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2653, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2654, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2655, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2656, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2657, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 7, LMUL: m8, SEW: e64, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 2 # rdn (round-down (truncate))

# Move a0 to test data area.
la a0, testdata
li a5, 66400
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 66416
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 66544
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 66672
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e64,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vse64.v v8, (a0)


  TEST_CASE(2658, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2659, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2660, t0, 0x6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2661, t0, 0x7fffffffffffc000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2662, t0, 0x8000000040000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2663, t0, 0x3fffc000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2664, t0, 0x3fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2665, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2666, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2667, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2668, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2669, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2670, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2671, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2672, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2673, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 7, LMUL: m8, SEW: e64, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 3 # rod round-to-odd (OR bits into LSB, aka "jam")

# Move a0 to test data area.
la a0, testdata
li a5, 66800
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 66816
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 66944
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 67072
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 7
vsetvli t1, t0, e64,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vse64.v v8, (a0)


  TEST_CASE(2674, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2675, t0, 0x1, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2676, t0, 0x6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2677, t0, 0x7fffffffffffc000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2678, t0, 0x8000000040000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2679, t0, 0x3fffc000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2680, t0, 0x3fff, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2681, t0, 0xf50471f1efe95ed0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2682, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2683, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2684, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2685, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2686, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2687, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2688, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2689, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 8, LMUL: m8, SEW: e64, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 0 # rnu (round-to-nearest-up)

# Move a0 to test data area.
la a0, testdata
li a5, 67200
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 67216
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 67344
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 67472
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e64,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vse64.v v8, (a0)


  TEST_CASE(2690, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2691, t0, 0x1, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2692, t0, 0x6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2693, t0, 0x7fffffffffffc000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2694, t0, 0x8000000040000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2695, t0, 0x3fffc000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2696, t0, 0x4000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2697, t0, 0xffffffffc0000001, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2698, t0, 0x766c35e5cc4055f3, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2699, t0, 0xdc6de5fa4dac412d, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2700, t0, 0xea8755309ccef534, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2701, t0, 0xb7fb9e95d8f62420, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2702, t0, 0xb0fbd1004aea0272, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2703, t0, 0xd9605c57e4400392, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2704, t0, 0xe7dac12c7f8e087c, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2705, t0, 0x2cb424c20332619c, ld t0, 0(a0); addi a0, a0, 8)


# Generating tests for VL: 8, LMUL: m8, SEW: e64, Mask: false

# Initialize vxrm CSR
csrwi vxrm, 1 # rne (round-to-nearest-even)

# Move a0 to test data area.
la a0, testdata
li a5, 67600
add a0, a0, a5

# Load data into v0 register group.
li t0, -1
vsetvli t1, t0, e32,m1,tu,mu
vle32.v v0, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 67616
add a0, a0, a5

# Load data into v8 register group.
li t0, -1
vsetvli t1, t0, e8,m8,tu,mu
vle8.v v8, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 67744
add a0, a0, a5

# Load data into v16 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v16, (a0)

# Move a0 to test data area.
la a0, testdata
li a5, 67872
add a0, a0, a5

# Load data into v24 register group.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vle64.v v24, (a0)

# -------------- TEST BEGIN --------------
li t0, 8
vsetvli t1, t0, e64,m8,tu,mu
vasubu.vv v8, v24, v16
# -------------- TEST END   --------------
la a0, resultdata

# Store v8 register group into result data area.
li t0, -1
vsetvli t1, t0, e64,m8,tu,mu
vse64.v v8, (a0)


  TEST_CASE(2706, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2707, t0, 0x0, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2708, t0, 0x6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2709, t0, 0x7fffffffffffc000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2710, t0, 0x8000000040000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2711, t0, 0x3fffc000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2712, t0, 0x4000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2713, t0, 0xffffffffc0000000, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2714, t0, 0x6ebdb6e849bd2b05, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2715, t0, 0x1fcb37206dd5cb27, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2716, t0, 0xb9f7cb9b9c84ca38, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2717, t0, 0x79ba9a947fdeff35, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2718, t0, 0x282b0efdc87c7f93, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2719, t0, 0x6c2029795432bb9, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2720, t0, 0xb0d540c53a7acca6, ld t0, 0(a0); addi a0, a0, 8)
  TEST_CASE(2721, t0, 0xa59b7f6b81ddab6b, ld t0, 0(a0); addi a0, a0, 8)



  TEST_PASSFAIL
RVTEST_CODE_END

  .data
RVTEST_DATA_BEGIN

# Reserve space for test data.
resultdata:
  .zero 128

testdata:
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7ff800f8030100
  .quad 0xffff01ff00ff7f7f
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x7f0008f8000f0200
  .quad 0xffff01ff000107
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x6026b85edc967cf0
  .quad 0x329315af5a9e4f70
  .quad 0x37cc0b8698a654b1
  .quad 0x81c41e68b9e41a25
  .quad 0xfc233869fa4c0c93
  .quad 0x86e3130845d6f39f
  .quad 0xb4b36d08ee4bd10e
  .quad 0x4e47b55bd4754e41
  .quad 0xbf9292ce430fc9aa
  .quad 0x6fb72b91507ea741
  .quad 0xce15d7a34aa897a
  .quad 0x7f34fb38784d85b8
  .quad 0xf1d653235345cfec
  .quad 0x7ae85ce71ba2d65e
  .quad 0xb110a63d3b02b3a5
  .quad 0x614ef8ba9c793e38
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xc4471a05aa336841
  .quad 0xe04f4e1de7449153
  .quad 0xc9a4071dc384faa5
  .quad 0x8639daff0f0a714f
  .quad 0xbcedeea38defa9d3
  .quad 0xaa7440b4bd2a04d9
  .quad 0x223f5870d8d25f17
  .quad 0x1ec7e3165c741bf4
  .quad 0xf1e4dfcbea3b8c95
  .quad 0x86f3991cf4d86b96
  .quad 0x12a5ff34a1cbebc4
  .quad 0x708cf284d514503f
  .quad 0x24c9be669b052927
  .quad 0x3166106f80370701
  .quad 0x583100519c4b704d
  .quad 0x9e231cb7dcf9566c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x827514be7a8e6289
  .quad 0xf9ff25fba24ee7b0
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x827514be7a8e6289
  .quad 0xf9ff25fba24ee7b0
  .quad 0x86ad669d9bfc3fbb
  .quad 0x4d85f32e585b001e
  .quad 0x92a790cde1662ea7
  .quad 0x40a174bc68e6b84a
  .quad 0xe2f19f7c0bac2a25
  .quad 0x2b11fbbf60038b38
  .quad 0x6ebdb6e849bd2b05
  .quad 0x1fcb37206dd5cb27
  .quad 0xb9f7cb9b9c84ca38
  .quad 0x79ba9a947fdeff35
  .quad 0x282b0efdc87c7f93
  .quad 0x6c2029795432bb9
  .quad 0xb0d540c53a7acca6
  .quad 0xa59b7f6b81ddab6b
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xfff8000300010000
  .quad 0x7ffffff80000
  .quad 0xffff7fff7fff
  .quad 0xffffffff0001ffff
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0xf00020000
  .quad 0x7fff00000008fff8
  .quad 0xffff000000010007
  .quad 0xffffffff0001
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xc4471a05aa336841
  .quad 0xe04f4e1de7449153
  .quad 0xc9a4071dc384faa5
  .quad 0x8639daff0f0a714f
  .quad 0xbcedeea38defa9d3
  .quad 0xaa7440b4bd2a04d9
  .quad 0x223f5870d8d25f17
  .quad 0x1ec7e3165c741bf4
  .quad 0xf1e4dfcbea3b8c95
  .quad 0x86f3991cf4d86b96
  .quad 0x12a5ff34a1cbebc4
  .quad 0x708cf284d514503f
  .quad 0x24c9be669b052927
  .quad 0x3166106f80370701
  .quad 0x583100519c4b704d
  .quad 0x9e231cb7dcf9566c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x6026b85edc967cf0
  .quad 0x329315af5a9e4f70
  .quad 0x37cc0b8698a654b1
  .quad 0x81c41e68b9e41a25
  .quad 0xfc233869fa4c0c93
  .quad 0x86e3130845d6f39f
  .quad 0xb4b36d08ee4bd10e
  .quad 0x4e47b55bd4754e41
  .quad 0xbf9292ce430fc9aa
  .quad 0x6fb72b91507ea741
  .quad 0xce15d7a34aa897a
  .quad 0x7f34fb38784d85b8
  .quad 0xf1d653235345cfec
  .quad 0x7ae85ce71ba2d65e
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x827514be7a8e6289
  .quad 0xf9ff25fba24ee7b0
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x6026b85edc967cf0
  .quad 0x329315af5a9e4f70
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x6026b85edc967cf0
  .quad 0x329315af5a9e4f70
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x827514be7a8e6289
  .quad 0xf9ff25fba24ee7b0
  .quad 0x86ad669d9bfc3fbb
  .quad 0x4d85f32e585b001e
  .quad 0x92a790cde1662ea7
  .quad 0x40a174bc68e6b84a
  .quad 0xe2f19f7c0bac2a25
  .quad 0x2b11fbbf60038b38
  .quad 0x6ebdb6e849bd2b05
  .quad 0x1fcb37206dd5cb27
  .quad 0xb9f7cb9b9c84ca38
  .quad 0x79ba9a947fdeff35
  .quad 0x282b0efdc87c7f93
  .quad 0x6c2029795432bb9
  .quad 0xb0d540c53a7acca6
  .quad 0xa59b7f6b81ddab6b
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x827514be7a8e6289
  .quad 0xf9ff25fba24ee7b0
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x6026b85edc967cf0
  .quad 0x329315af5a9e4f70
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x6026b85edc967cf0
  .quad 0x329315af5a9e4f70
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x100000000
  .quad 0xfffffff800000003
  .quad 0xfffffff800000000
  .quad 0x7fffffff
  .quad 0x7fffffff7fffffff
  .quad 0xffffffff
  .quad 0x1ffffffff
  .quad 0xffffffffffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x200000000
  .quad 0xf
  .quad 0x8fffffff8
  .quad 0x7fffffff00000000
  .quad 0x100000007
  .quad 0xffffffff00000000
  .quad 0xffffffff00000001
  .quad 0xffffffff
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x827514be7a8e6289
  .quad 0xf9ff25fba24ee7b0
  .quad 0x86ad669d9bfc3fbb
  .quad 0x4d85f32e585b001e
  .quad 0x92a790cde1662ea7
  .quad 0x40a174bc68e6b84a
  .quad 0xe2f19f7c0bac2a25
  .quad 0x2b11fbbf60038b38
  .quad 0x6ebdb6e849bd2b05
  .quad 0x1fcb37206dd5cb27
  .quad 0xb9f7cb9b9c84ca38
  .quad 0x79ba9a947fdeff35
  .quad 0x282b0efdc87c7f93
  .quad 0x6c2029795432bb9
  .quad 0xb0d540c53a7acca6
  .quad 0xa59b7f6b81ddab6b
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x6026b85edc967cf0
  .quad 0x329315af5a9e4f70
  .quad 0x37cc0b8698a654b1
  .quad 0x81c41e68b9e41a25
  .quad 0xfc233869fa4c0c93
  .quad 0x86e3130845d6f39f
  .quad 0xb4b36d08ee4bd10e
  .quad 0x4e47b55bd4754e41
  .quad 0xbf9292ce430fc9aa
  .quad 0x6fb72b91507ea741
  .quad 0xce15d7a34aa897a
  .quad 0x7f34fb38784d85b8
  .quad 0xf1d653235345cfec
  .quad 0x7ae85ce71ba2d65e
  .quad 0xb110a63d3b02b3a5
  .quad 0x614ef8ba9c793e38
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xc4471a05aa336841
  .quad 0xe04f4e1de7449153
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0xc4471a05aa336841
  .quad 0xe04f4e1de7449153
  .quad 0xc9a4071dc384faa5
  .quad 0x8639daff0f0a714f
  .quad 0xbcedeea38defa9d3
  .quad 0xaa7440b4bd2a04d9
  .quad 0x223f5870d8d25f17
  .quad 0x1ec7e3165c741bf4
  .quad 0xf1e4dfcbea3b8c95
  .quad 0x86f3991cf4d86b96
  .quad 0x12a5ff34a1cbebc4
  .quad 0x708cf284d514503f
  .quad 0x24c9be669b052927
  .quad 0x3166106f80370701
  .quad 0x583100519c4b704d
  .quad 0x9e231cb7dcf9566c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x6026b85edc967cf0
  .quad 0x329315af5a9e4f70
  .quad 0x37cc0b8698a654b1
  .quad 0x81c41e68b9e41a25
  .quad 0xfc233869fa4c0c93
  .quad 0x86e3130845d6f39f
  .quad 0xb4b36d08ee4bd10e
  .quad 0x4e47b55bd4754e41
  .quad 0xbf9292ce430fc9aa
  .quad 0x6fb72b91507ea741
  .quad 0xce15d7a34aa897a
  .quad 0x7f34fb38784d85b8
  .quad 0xf1d653235345cfec
  .quad 0x7ae85ce71ba2d65e
  .quad 0xb110a63d3b02b3a5
  .quad 0x614ef8ba9c793e38
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0xc9a4071dc384faa5
  .quad 0x8639daff0f0a714f
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x10c50019480d982f
  .quad 0x22352213d5777a14
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2
  .quad 0x30ac75dc32808aa4
  .quad 0x8344c0aa5b761295
  .quad 0x3ad64ccbddb8bebc
  .quad 0xf3dccbfaddff6231
  .quad 0xa340fa124cb8dc1d
  .quad 0x8133a51e228fc5c6
  .quad 0x7d115150b866a93d
  .quad 0xe3c0d40947cd3b17
  .quad 0xcaced9af287d3124
  .quad 0xf50471f1efe95ed0
  .quad 0x766c35e5cc4055f3
  .quad 0xdc6de5fa4dac412d
  .quad 0xea8755309ccef534
  .quad 0xb7fb9e95d8f62420
  .quad 0xb0fbd1004aea0272
  .quad 0xd9605c57e4400392
  .quad 0xe7dac12c7f8e087c
  .quad 0x2cb424c20332619c
  .quad 0x0
  .quad 0x1
  .quad 0x3
  .quad 0x0
  .quad 0xffffffff80000000
  .quad 0xffffffff80000000
  .quad 0x0
  .quad 0x7fffffff
  .quad 0x7fffffff
  .quad 0xffffffff80000000
  .quad 0x7fffffff
  .quad 0x0
  .quad 0xffffffffffffffff
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x1
  .quad 0x0
  .quad 0x2
  .quad 0xf
  .quad 0xffffffffffff8000
  .quad 0x0
  .quad 0xffffffffffff8000
  .quad 0x7fff
  .quad 0x0
  .quad 0x7fff
  .quad 0x7fff
  .quad 0xffffffffffff8000
  .quad 0xffffffffffffffff
  .quad 0x1
  .quad 0xffffffffffffffff
  .quad 0x0
  .quad 0x2


RVTEST_DATA_END

